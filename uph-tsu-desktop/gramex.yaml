# Generated by gramex init on 2018-05-14 by mohmadjakeer <mohmad.jakeer@gramener.com>. Please retain this line.
import:
  ui:
    path: $GRAMEXAPPS/ui/gramex.yaml # Import the UI components
    YAMLURL: $YAMLURL/ui/ # ... at this URL
    namespace: [url]
  deploy: $GRAMEXPATH/deploy.yaml
  logviewer: logviewer.yaml
  variables: variables_config.yaml
  variables_program_area: program-config.yaml
  program_area: program-area.yaml
  up_tsu_desktop_app: up_tsu_desktop_app.py

variables:
  # connection_str: $MYSQL_CONNECTOR://root:mysql@bmgf@$MYSQL_HOST/$UP_DB_TEST
  # connection_str: $MYSQL_CONNECTOR://$MYSQL_USER:$MYSQL_PASSWORD@$MYSQL_HOST/$UP_DB
  # connection_str: mysql://uptsu:8X9vid@@dataserver.gramener.com/uptsu
  # connection_str: mysql://root:root%40123@localhost/uptsu_pwd
  # connection_str: mysql://root:Pooja@2892@localhost/uptsu_pwd
  # connection_str: mysql://root:1234@localhost/uptsu_pwd
  connection_str: mysql://dev:sUUR2mZM1fR5WfKp@localhost/hmis_test_may_2024

  E_M: "Jan" #exec_month
  E_Y: 2022 #exec_year
  URL_: https://bmgf.gramener.com/up-tsu-desktop/capture?url
  URL_EX: https://bmgf.gramener.com/up-tsu-desktop/executive-summary-capture?district
  MAP_: clk=rank&district_level=&by=performance&start&ext=pdf&delay=4000&file

log:
  handlers:
    logfile:
      filename: $GRAMEXDATA/up-tsu-desktop/gramex.log
    requests:
      filename: $GRAMEXDATA/up-tsu-desktop/requests.csv.desktop
      keys:
        [
          "time",
          "ip",
          "user.id",
          "status",
          "duration",
          "method",
          "uri",
          "error",
          headers.User-Agent,
        ]
    user:
      filename: $GRAMEXDATA/up-tsu-desktop/user.csv

app:
  session:
    expiry: 3600
    secure_cookies: true
    httponly_cookies: true  # Use HttpOnly flag
    samesite: 'Lax'

    type: json # Type of store to use: json, sqlite, memory
    path: $YAMLPATH/sessions/session.json # Path to the store (ignored for type: memory)
    # expiry: 0.0006                      # Session cookies expiry in days
    flush: 5 # Write store to disk periodically (in seconds)
    purge: 60 # Delete old sessions periodically (in seconds)
  settings:
    serve_traceback: False
    xsrf_cookie_kwargs:
      httponly: true
      secure: true
  server:
    timeout_keep_alive: 5

test:
  auth:
    user: alpha
    password: alpha
    login_url: /$YAMLURL/login

sms:
  exotel:
    type: exotel
    sid: gramener
    token: 589a092b367998d16db7fbc5588cdb961c6e4d02

init:
  python: hide_server.patch_tornado_server_header()

handlers:
  FileHandler:
    ignore:
      - "*.yaml"
      - "*.git*"
      - "*.json"
      - "*Dockerfile"
      - "*nohup.out"
      - "*.git/*"
      - "*ui/*"

BaseHandler:
  error:
    500: &ERROR
      function: up_tsu_desktop_app.error_fn(status_code, kwargs, handler)
      header:
        Cache-Control: no-cache
        Content-Type: text/html
    400: *ERROR
    401: *ERROR
    403: *ERROR
    404: *ERROR

url:
  templates-home:
    pattern: /$YAMLURL/templates/(.*)
    handler: FileHandler
    priority: 100
    kwargs:
      path: $YAMLPATH/templates/
      # auth:
      #   login_url: /$YAMLURL/login
      # See https://learn.gramener.com/guide/auth/#authorization for auth rules
      # template: true
      # auth: &AUTH
      #   login_url: /$YAMLURL/login
      # membership:
      #   Approval: Approved
      # template: $YAMLPATH/error/403.html
      headers:
        Content-Disposition: 'attachment' 
        Cache-Control: 'no-cache, no-store, must-revalidate'
        Pragma: 'no-cache'
        Expires: '0'
        X-Content-Type-Options: 'nosniff'
        Content-Security-Policy: "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self'; object-src 'none'; frame-ancestors 'none'; base-uri 'self'"
        Permission-Policy: "geolocation=(self)"
        X-Frame-Options: "DENY"
        X-XSS-Protection: "1; mode=block"
        Strict-Transport-Security: "max-age=63072000; includeSubDomains; preload"
        Set-Cookie: "sessionid=securecookie; HttpOnly; Secure; SameSite=Strict"


        # $FILEHANDLER
        # Content-Security-Policy: "default-src 'self'; script-src 'self'"
        # Cache-Control: no-cache, no-store, max-age=0, must-revalidate

  gramexcharts-disable-directory-listing:
    pattern: /$YAMLURL/(ui/popper.js)/
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/error/errorpage.html
      index: false

  register:
    pattern: /$YAMLURL/db # Map this URL
    handler: FormHandler # to the DBAuth handler
    kwargs:
      prepare: up_tsu_desktop_app.merge_reg_login_user
      url: $connection_str # Pick up list of users from this XLSX (or CSV) file
      table: user_details
      id: [user, phonenumber] # The user column in users table has the user ID
      modify: up_tsu_desktop_app.let_user_know
      auth:
        login_url: /$YAMLURL/login
        membership:
          designation: [Admin]
      xsrf_cookies: true
      

  mh-health-app-css-handler:
    pattern: /$YAMLURL/custom
    handler: FunctionHandler
    kwargs:
      function: gramex.apps.ui.sass(handler, r"$YAMLPATH/custom.scss")

  register-unique-phones:
    pattern: /$YAMLURL/unique_phone
    handler: FormHandler
    kwargs:
      prepare: up_tsu_desktop_app.validate(args, handler)
      url: $connection_str
      table: user_details
      id: [user, phonenumber]
      query: "SELECT * FROM user_details WHERE phonenumber=:phonenumber AND user=:user"
  register-unique-users:
    pattern: /$YAMLURL/unique_user
    handler: FormHandler
    kwargs:
      xsrf_cookies: true
      
      prepare: up_tsu_desktop_app.validate(args, handler)
      url: $connection_str
      table: user_details
      id: [user, phonenumber]
      query: "SELECT * FROM user_details WHERE phonenumber=:phonenumber"

  unsafe-handler:
    pattern: /$YAMLURL/(Dockerfile|nohup.out)
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/
      ignore:
        - "Dockerfile"
        - "nohup.out"

  up-tsu-privacy-stmt:
    # Privacy policy
    pattern: /$YAMLURL/privacy
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/privacy.html

  up-tsu-static_files:
    pattern: /$YAMLURL/(data/.*|img/.*) # Map all static files
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/ # from under this directory
      headers: &headers
        Cache-Control: public, max-age=315360000 # Cache for 10 years on the browser
    cache: true # Also cache on the server

  up-tsu-desktop/login:
    pattern: /$YAMLURL/login
    handler: DBAuth
    kwargs:
      # session_inactive: 0.014 #0.0035 #0.013  # 20 mins,  unit is days
      # session_expiry: 0.00070 #0.014
      session_expiry: 0.0207
      session_inactive: 0.0207
      url: $connection_str
      table: user_details
      user:
        column: user
        arg: user
      # delay: [0, 0, 0, 0, 58]   #If the user login fails after 5 attempts,
      # the response is delayed to slow down password guessing attacks
      password:
        column: password
        arg: password
        hash: true
      # validate: up_tsu
      
      template: $YAMLPATH/login.html
      
      redirect:
        query: next
        url: /$YAMLURL/
  # up-tsu-desktop/login:
  #   pattern: /$YAMLURL/login
  #   handler: SimpleAuth
  #   kwargs:
  #     credentials:
  #       alpha: alpha
  #     template: $YAMLPATH/login.html
  #     redirect:
  #       query: next
  #       url: /$YAMLURL/

  up-tsu-desktop/logout:
    pattern: /$YAMLURL/logout
    handler: LogoutHandler
    kwargs:
      redirect:
        url: /$YAMLURL/login

  up-tsu-desktop/reset:
    pattern: /$YAMLURL/reset
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/reset_password.html
      template: true

  up-tsu-desktop/register:
    pattern: /$YAMLURL/register
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/registration.html
      template: true

  up-tsu-desktop/send-otp:
    pattern: /$YAMLURL/send_otp
    handler: FunctionHandler
    kwargs:
      function: up_tsu_desktop_app.send_otp

  up-tsu-desktop/save-picture:
    pattern: /$YAMLURL/save_picture
    handler: UploadHandler
    kwargs:
      path: $YAMLPATH/profile_pic/
      if_exists: overwrite
      transform:
        function: up_tsu_desktop_app.rename_image(content, handler)

  up-tsu-desktop/registration-otp:
    pattern: /$YAMLURL/registration_otp
    handler: FunctionHandler
    kwargs:
      function: up_tsu_desktop_app.registration_otp

  up-tsu-desktop/registration_saveuserdetails:
    pattern: /$YAMLURL/saveuserdetails
    handler: FormHandler
    kwargs:
      prepare: up_tsu_desktop_app.set_password
      url: $connection_str
      table: user_details
      id: [user, phonenumber]
      xsrf_cookies: true
      

  up-tsu-desktop/get-otp:
    pattern: /$YAMLURL/get_otp
    handler: FormHandler
    kwargs:
      id: otp
      url: $connection_str
      query: "select otp from user_details where phonenumber=:phonenumber"
      xsrf_cookies: true
      

  up-tsu-desktop/save-password:
    pattern: /$YAMLURL/save_password
    handler: FormHandler
    kwargs:
      id: phonenumber
      url: $connection_str
      table: user_details
      xsrf_cookies: true
      

  up-tsu-desktop/active_session:
    pattern: /$YAMLURL/active_session
    handler: FunctionHandler
    kwargs:
      function: up_tsu_desktop_app.active_session

  tb-home:
    pattern: /$YAMLURL/
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/home_page.html
      # See https://learn.gramener.com/guide/auth/#authorization for auth rules
      template: true
      auth: &AUTH
        login_url: /$YAMLURL/login
        # membership:
        #   Approval: Approved
        # template: $YAMLPATH/error/403.html
      headers: &FILEHEADER
        Cache-Control: no-cache, no-store, max-age=0, must-revalidate

  up-tsu-desktop/uploadhandler:
    pattern: /$YAMLURL/upload
    handler: UploadHandler
    kwargs:
      auth: *AUTH
      path: $YAMLPATH/data_pdf/
      if_exists: overwrite
      validate:
        - file:
            ext:['.pdf']
      transform:
        # function: up_tsu_desktop_app.rename_file(content, handler)

  # up-tsu-desktop/file-download:
  #   pattern: /$YAMLURL/spec_download?file=(\w+)
  #   handler: FileHandler
  #   kwargs:
  #     path: $YAMLPATH/data_pdf/(\w+)
  #     headers:
  #       Content-Type: text/pdf
  #       Content-Disposition: attachment;filename=(\w+)
  #       error:
  #         404:

  up-tsu-desktop/apk-download:
    pattern: /$YAMLURL/apk_download
    handler: FunctionHandler
    kwargs:
      function: up_tsu_desktop_app.download_apk

  uptsu-login-captcha:
    pattern: /$YAMLURL/cap
    handler: FunctionHandler
    kwargs:
      function: up_tsu_desktop_app.get_captcha_img

  up-tsu-desktop/file-download:
    pattern: /$YAMLURL/spec_download
    handler: FunctionHandler
    kwargs:
      auth: *AUTH
      function: up_tsu_desktop_app.download_pdf

  up-tsu-desktop/file-delete:
    pattern: /$YAMLURL/spec_delete
    handler: FunctionHandler
    kwargs:
      auth: *AUTH
      function: up_tsu_desktop_app.delete_pdf

  up-tsu-desktop/files_list:
    pattern: /$YAMLURL/files_list # The "total" URL
    handler: FunctionHandler # runs a function
    kwargs:
      auth: *AUTH
      function: up_tsu_desktop_app.get_list_of_files # total() from calculations.py
      headers:
        Content-Type: application/json # Display as JSON

  up-tsu-desktop/ticker_msg:
    pattern: /$YAMLURL/ticker_msg
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data/ticker_msg.db
      table: tickerMsg
      id: Id
      xsrf_cookies: true
      

  up-tsu-desktop/ticker_data:
    pattern: /$YAMLURL/ticker_data
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data/ticker_msg.db
      # query: 'pragma table_info("ticker_data")'
      table: tickerView
      id: dashboard
      # id: [dashboard, msg]
      xsrf_cookies: true
      

  up-tsu-desktop/amethi_ticker_msg:
    pattern: /$YAMLURL/amethi_ticker_msg
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data/ticker_msg.db
      table: amethi_msg
      id: Id
      xsrf_cookies: true

  up-tsu-desktop/map:
    pattern: /$YAMLURL/map_view
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/map_view.html
      template: true
      auth: *AUTH
      headers: *FILEHEADER
      
      # auth: &AUTH
      #   login_url: /$YAMLURL/login
      #   membership:
      #     Approval: Approved
      #   template: $YAMLPATH/error/403.html
      # headers: &FILEHEADER
      #   Cache-Control: no-cache, no-store, max-age=0, must-revalidate
      config:
        to_: "2022-12-01"
        from_: "2023-01-01"
        filter_type: "date"
        month: "Jan 2023"
        state_name: "Uttar Pradesh"
        order_type: "rank"
        aspirational_districts:
          ["180", "182", "184", "181", "200", "172", "196", "171"]
        hpds:
          [
            "174",
            "175",
            "199",
            "200",
            "153",
            "154",
            "176",
            "177",
            "180",
            "149",
            "150",
            "151",
            "152",
            "136",
            "155",
            "159",
            "160",
            "201",
            "202",
            "181",
            "182",
            "183",
            "184",
            "186",
            "187",
          ]
        data_map_dist:
          {
            "C.S.M. Nagar": "Amethi",
            "C S M Nagar": "Amethi",
            "Baghpat": "Bagpat",
            "Kanshiram Nagar": "Kasganj",
            "Mahamaya Nagar": "Hathras",
            "Sant Ravidas Nagar (Bhadohi)": "Bhadohi",
            "Unnao": "Unnav",
            "Kheri": "Lakhimpur Kheri",
            "kheri": "Lakhimpur Kheri",
            "Mahrajganj": "Maharajganj",
            "Siddharthnagar": "Siddharth Nagar",
            "Bulandshahr": "Bulandshahar",
            "Mau": "Maunathbhanjan",
            "Bara Banki": "Barabanki",
            "Sant Ravidas Nagar Bhadohi": "Bhadohi",
            "Jyotiba Phule Nagar": "Amroha",
          }

  up-tsu-desktop/amethi_map:
    pattern: /$YAMLURL/amethi_map
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/amethi_map_view.html
      template: true
      auth: *AUTH
      headers: *FILEHEADER
      config:
        to_: "2021-07-01"
        from_: "2021-08-01"
        aggregate: 44.7
        filter_type: "date"
        month: "Aug 2021"
        state_name: "Uttar Pradesh"
        order_type: "rank"
        aspirational_districts:
          ["180", "182", "184", "181", "200", "172", "196", "171"]
        hpds:
          [
            "174",
            "175",
            "199",
            "200",
            "153",
            "154",
            "176",
            "177",
            "180",
            "149",
            "150",
            "151",
            "152",
            "136",
            "155",
            "159",
            "160",
            "201",
            "202",
            "181",
            "182",
            "183",
            "184",
            "186",
            "187",
          ]
        data_map_dist:
          {
            "C.S.M. Nagar": "Amethi",
            "C S M Nagar": "Amethi",
            "Baghpat": "Bagpat",
            "Kanshiram Nagar": "Kasganj",
            "Mahamaya Nagar": "Hathras",
            "Sant Ravidas Nagar (Bhadohi)": "Bhadohi",
            "Unnao": "Unnav",
            "Kheri": "Lakhimpur Kheri",
            "kheri": "Lakhimpur Kheri",
            "Mahrajganj": "Maharajganj",
            "Siddharthnagar": "Siddharth Nagar",
            "Bulandshahr": "Bulandshahar",
            "Mau": "Maunathbhanjan",
            "Bara Banki": "Barabanki",
            "Sant Ravidas Nagar Bhadohi": "Bhadohi",
            "Jyotiba Phule Nagar": "Amroha",
          }

  up-tsu-desktop/executive-summary:
    pattern: /$YAMLURL/executive-summary
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/executive-summary.html
      auth: *AUTH
      headers: *FILEHEADER
      template: true
      config:
        filter_type: "date"

  up-tsu-desktop/executive-summary-cap:
    pattern: /$YAMLURL/executive-summary-capture
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/executive-summary-capture.html
      template: true
      auth: *AUTH
      headers: *FILEHEADER
      config:
        filter_type: "date"

  up-tsu-desktop/landing:
    pattern: /$YAMLURL/landing
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/landing_page.html
      template: true
      headers: *FILEHEADER

  up-tsu-desktop/cm_indicators_data:
    pattern: /$YAMLURL/cm_indicators_data
    handler: FunctionHandler
    kwargs:
      function: up_tsu_desktop_app.cm_indicators_data(handler)

  up-tsu-desktop/table:
    pattern: /$YAMLURL/table
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/table_view.html
      auth: *AUTH
      template: true
      headers: *FILEHEADER
      config:
        val: "indicator"
        name: "composite_score"
        filter_type: "indicator"
        level: "district"
        sort_key: "rank"
        date: "2023-01-01"
        year: 2022
        state_name: "Uttar Pradesh"
        district: "Agra"
        district_priority:
          - ["180", "182", "184", "181", "200", "172", "196", "171"]
          - [
              "174",
              "175",
              "199",
              "200",
              "153",
              "154",
              "176",
              "177",
              "180",
              "149",
              "150",
              "151",
              "152",
              "136",
              "155",
              "159",
              "160",
              "201",
              "202",
              "181",
              "182",
              "183",
              "184",
              "186",
              "187",
            ]
        immunization_indicator: "% of children received full immunization (BCG, Penta 1, 2, 3, Measles)"
        table_config:
          rank:
            name: "rank"
            sort: true
            w: 15
          month:
            name: "monthly"
            sort: true
            w: 15
          quarter:
            name: "quarterly"
            sort: true
            w: 15
          fy:
            name: "fy"
            sort: true
            w: 15
          trend:
            name: "trend"
            sort: false
            labels: ["left", "right"]
            w: 20

  up-tsu-desktop/cmo_table:
    pattern: /$YAMLURL/cmo_table
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/cmo_table_view.html
      auth: *AUTH
      template: true
      headers: *FILEHEADER
      config:
        val: "indicator"
        name: "ANC registered within first trimester"
        filter_type: "indicator"
        level: "district"
        sort_key: "rank"
        date: "2023-01-01"
        year: 2022
        state_name: "Uttar Pradesh"
        district: "Agra"
        district_priority:
          - ["180", "182", "184", "181", "200", "172", "196", "171"]
          - [
              "174",
              "175",
              "199",
              "200",
              "153",
              "154",
              "176",
              "177",
              "180",
              "149",
              "150",
              "151",
              "152",
              "136",
              "155",
              "159",
              "160",
              "201",
              "202",
              "181",
              "182",
              "183",
              "184",
              "186",
              "187",
            ]
        immunization_indicator: "% of children received full immunization (BCG, Penta 1, 2, 3, Measles)"
        table_config:
          rank:
            name: "rank"
            sort: true
            w: 15
          month:
            name: "monthly"
            sort: true
            w: 15
          quarter:
            name: "quarterly"
            sort: true
            w: 15
          fy:
            name: "fy"
            sort: true
            w: 15
          trend:
            name: "trend"
            sort: false
            labels: ["left", "right"]
            w: 20

  up-tsu-desktop/amethi_table:
    pattern: /$YAMLURL/amethi_table
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/amethi_table_view.html
      auth: *AUTH
      template: true
      headers: *FILEHEADER
      config:
        val: "indicator"
        name: "aggregate_score"
        filter_type: "indicator"
        level: "district"
        sort_key: "rank"
        date: "2021-08-01"
        month: "Aug 2021"
        year: 2021
        state_name: "Amethi"
        district: "Amethi"
        district_priority:
          - ["307", "305", "306", "515", "514", "515", "517", "518", "519"]
          - [
              "307",
              "305",
              "306",
              "515",
              "514",
              "515",
              "517",
              "518",
              "519",
              "520",
              "521",
              "522",
              "523",
            ]
        immunization_indicator: "% of children received full immunization (BCG, Penta 1, 2, 3, Measles)"
        table_config:
          rank:
            name: "Curr. Month Block rank"
            sort: true
            w: 15
          pre_rank:
            name: "Prev. Month Block rank"
            sort: true
            w: 15
          month:
            name: "Curr. Month Performance"
            sort: true
            w: 15
          pre_month:
            name: "Prev. Month Performance"
            sort: true
            w: 15
          quarter:
            name: "Curr. Quarter"
            sort: true
            w: 15
          pre_quarter:
            name: "Prev. Quarter"
            sort: true
            w: 15
          fy:
            name: "fy"
            sort: true
            w: 15
          trend:
            name: "trend"
            sort: false
            labels: ["left", "right"]
            w: 20

  up-tsu-desktop/niti_table:
    pattern: /$YAMLURL/niti_table
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/niti_table_view.html
      auth: *AUTH
      template: true
      headers: *FILEHEADER
      config:
        val: "indicator"
        name: "% ANC registered in First trimester"
        filter_type: "indicator"
        level: "district"
        sort_key: "rank"
        date: "2023-01-01"
        year: 2022
        state_name: "Uttar Pradesh"
        district: "Agra"
        district_priority:
          - ["180", "182", "184", "181", "200", "172", "196", "171"]
          - [
              "174",
              "175",
              "199",
              "200",
              "153",
              "154",
              "176",
              "177",
              "180",
              "149",
              "150",
              "151",
              "152",
              "136",
              "155",
              "159",
              "160",
              "201",
              "202",
              "181",
              "182",
              "183",
              "184",
              "186",
              "187",
            ]
        immunization_indicator: "% of children received full immunization (BCG, Penta 1, 2, 3, Measles)"
        table_config:
          rank:
            name: "rank"
            sort: true
            w: 15
          month:
            name: "monthly"
            sort: true
            w: 15
          quarter:
            name: "quarterly"
            sort: true
            w: 15
          fy:
            name: "fy"
            sort: true
            w: 15
          trend:
            name: "trend"
            sort: false
            labels: ["left", "right"]
            w: 20

  up-tsu-desktop/table_noauth:
    pattern: /$YAMLURL/table_noauth
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/table_view.html
      # auth: *AUTH
      template: true
      headers: *FILEHEADER
      config:
        val: "indicator"
        name: "composite_score"
        filter_type: "indicator"
        level: "district"
        sort_key: "rank"
        date: "2023-01-01"
        year: 2022
        state_name: "Uttar Pradesh"
        district: "Agra"
        district_priority:
          - ["180", "182", "184", "181", "200", "172", "196", "171"]
          - [
              "174",
              "175",
              "199",
              "200",
              "153",
              "154",
              "176",
              "177",
              "180",
              "149",
              "150",
              "151",
              "152",
              "136",
              "155",
              "159",
              "160",
              "201",
              "202",
              "181",
              "182",
              "183",
              "184",
              "186",
              "187",
            ]
        immunization_indicator: "% of children received full immunization (BCG, Penta 1, 2, 3, Measles)"
        table_config:
          rank:
            name: "rank"
            sort: true
            w: 15
          month:
            name: "monthly"
            sort: true
            w: 15
          quarter:
            name: "quarterly"
            sort: true
            w: 15
          fy:
            name: "fy"
            sort: true
            w: 15
          trend:
            name: "trend"
            sort: false
            labels: ["left", "right"]
            w: 20

  up-tsu-desktop/district_cm_data:
    pattern: /$YAMLURL/district_cm_data
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores.csv
      prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      query:
        SELECT t1.perc_point, t2.indicator_name AS indicator, t2.district_id_num as district_id,
        t2.district_name as district, t2.division_name as division, t2.div_map_id, t2.map_id,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_cm_district_data_monthly t1
        LEFT JOIN dim_cm_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'

  up-tsu-desktop/district_cm_quarter_data:
    pattern: /$YAMLURL/district_cm_quarter_data
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores_quarter.csv
      query:
        SELECT t1.perc_point, t2.indicator_name AS indicator, t2.district_id_num as district_id,
        t2.district_name AS district, t2.division_name AS division, t2.div_map_id, t2.map_id,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_cm_district_data_quaterly t1
        LEFT JOIN dim_cm_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.year = {year} AND t1.quarter = {quarter}

  up-tsu-desktop/district_cm_year_data:
    pattern: /$YAMLURL/district_cm_year_data
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores_year.csv
      query:
        SELECT t1.perc_point, t2.indicator_name AS indicator, t2.district_id_num as district_id,
        t2.district_name AS district, t2.division_name AS division, t2.div_map_id, t2.map_id,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_cm_district_data_yearly t1
        LEFT JOIN dim_cm_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.year = {year}

  up-tsu-desktop/block_cm_data:
    pattern: /$YAMLURL/block_cm_data
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data_niti/block_niti_scores.csv
      prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id_num as district_id, t2.district_name AS district,
        CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_cm_block_data_monthly t1
        LEFT JOIN dim_cm_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t2.indicator_id = t1.indicator_id
        WHERE t1.date = '{date}'

  up-tsu-desktop/block_cm_quarter_data:
    pattern: /$YAMLURL/block_cm_quarter_data
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data_niti/block_niti_scores_quarter.csv
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id_num as district_id, t2.district_name AS district,
        CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_cm_block_data_quaterly t1
        LEFT JOIN dim_cm_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t2.indicator_id = t1.indicator_id
        WHERE t1.year = {year} AND t1.quarter = {quarter}

  up-tsu-desktop/block_cm_year_data:
    pattern: /$YAMLURL/block_cm_year_data
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/block_niti_scores_year.csv
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id_num as district_id, t2.district_name AS district,
        CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_cm_block_data_yearly t1
        LEFT JOIN dim_cm_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t2.indicator_id = t1.indicator_id
        WHERE t1.year = {year}

  up-tsu-desktop/sub_ind_district:
    pattern: /$YAMLURL/subindicator_districts_cm
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/subindicator_districts_cm.csv
      query:
        SELECT f.date, f.year, f.quarter, f.value as value, concat('indicator_',f.indicator_id) as indicator_id,
        d.sub_indicator_name as sub_id,
        d2.district_id_num as district_id, d2.district_name as district,
        d2.div_map_id, d2.division_name as division
        FROM fact_cm_sub_indicator_district f
        Join dim_cm_sub_indicator_district d on d.sub_indicator_id = f.sub_indicator_id
        join dim_cm_district_data d2 on d2.district_id_num = f.district_id_num
        and d2.indicator_id = f.indicator_id
        # where (date = '{date}' or date='{date_yr}')
        # and concat('indicator_',f.indicator_id) = '{indicator_id}';

  up-tsu-desktop/sub_ind_block:
    pattern: /$YAMLURL/subindicator_blocks_cm
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data/subindicator_blocks_cm.csv
      query:
        SELECT f.date, f.year, f.quarter, f.value as value, concat('indicator_',f.indicator_id) as indicator_id,
        d.sub_indicator_name as sub_id,
        d2.district_id_num as district_id, d2.district_name as district,
        d2.block_name, concat('blc_',d2.block_id_num ) as block_id FROM fact_cm_sub_indicator_block f
        Join dim_cm_sub_indicator_block d on d.sub_indicator_id = f.sub_indicator_id
        join dim_cm_block_data d2 on d2.block_id_num = f.block_id_num
        and d2.indicator_id = f.indicator_id
        # where (date ='{date}' or date='{date_yr}')
        # and concat('indicator_',f.indicator_id) = '{indicator_id}'
        # group by d2.block_id_num;

  up-tsu-desktop/district_data_noauth:
    pattern: /$YAMLURL/district_data_noauth
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query: SELECT district_name as district, division_name as division
        FROM dim_cm_district_data group by district_id_num;
    # cache: true

  up-tsu-mapview/uniq_district_id:
    pattern: /$YAMLURL/distinct_district_id
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query: SELECT distinct district_name,district_id_num FROM dim_phase1_block_data;

  up-tsu-mapview/uniq_division_id:
    pattern: /$YAMLURL/distinct_division_id
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query: SELECT distinct division_name,division_id_num FROM dim_phase1_district_data;

  up-tsu-desktop/block_view_exe:
    pattern: /$YAMLURL/block_view_exe
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query: SELECT d.block_name as block,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,
          f.composite_rank,f.date as date,
          d.map_id as map_id,d.block_id_num as blk_id,
          avg(indicator_index) as indicator_index
          FROM fact_phase1_block_data_monthly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and
          d.block_id_num =f.block_id_num
          where (date <= '{from_date}' and date >= '{to_date}')
          and d.district_id_num = {district}
          group by block,date,composite_rank,map_id,blk_id
          order by composite_index desc, block asc;
        default:
          district: d.district_id_num

  up-tsu-desktop/district_data_exe:
    pattern: /$YAMLURL/district_data_exe
    handler: FormHandler
    kwargs:
      auth: *AUTH
      url: $connection_str
      query: SELECT d.district_name as district_name,f.perc_point as perc_point,
        f.composite_index,
        f.composite_rank,f.date as date,
        f.indicator_index,f.indicator_rank,
        d.map_id as map_id,d.district_id_num as dist_id,
        d.indicator_name as indicator,d.indicator_id
        FROM fact_phase1_district_data_monthly as f
        left join dim_phase1_district_data as d
        on d.indicator_id = f.indicator_id and
        d.district_id_num = f.district_id_num
        where (date <= '{from_date}' and date >= '{to_date}')
        and d.district_id_num = {district}
      modify: data.fillna(0)
      default:
        district: d.district_id_num

  up-tsu-desktop/block_data_exe:
    pattern: /$YAMLURL/block_data_exe
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query: SELECT d.block_name as block,f.perc_point as perc_point,
          f.composite_index,
          f.composite_rank,f.date as date,
          f.indicator_index,f.indicator_rank,
          d.map_id as map_id,d.block_id_num as blk_id,
          d.indicator_name as indicator,d.indicator_id,
          d.calc_type as calc_type
          FROM fact_phase1_block_data_monthly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and
          d.block_id_num = f.block_id_num
          where (date <= '{from_date}' and date >= '{to_date}')
          and d.district_id_num = {district}
          group by block, date, map_id, blk_id, indicator
          order by composite_index desc;
    modify: data.fillna(0)
    default:
      district: d.district_id_num

  up-tsu-desktop/context_data_district:
    pattern: /$YAMLURL/context_data_district
    handler: FormHandler
    kwargs:
      auth: *AUTH
      url: $connection_str
      query: SELECT d.district_name as district,
        f.date as date,
        d.indicator_id,f.perc_point,
        d.indicator_name as indicator,
        calc_type
        FROM fact_phase1_district_data_monthly as f
        left join dim_phase1_district_data as d
        on d.indicator_id = f.indicator_id and
        d.district_id_num =f.district_id_num
        where (date <= '{from_date}' and date >= '{to_date}')
        and d.division_id_num = {division};
      default:
        division: d.division_id_num

  up-tsu-desktop/context_data_division:
    pattern: /$YAMLURL/context_data_division
    handler: FormHandler
    kwargs:
      auth: *AUTH
      url: $connection_str
      query:
        SELECT d.indicator_name as indicator,
        d.indicator_id as indicator_id,
        d.division_name as division,
        d.division_id_num as division_id_num,
        avg(f.perc_point) as perc_point,
        avg(composite_index) as composite_index,
        avg(indicator_index) as indicator_index,
        calc_type,date
        FROM fact_phase1_district_data_monthly as f
        left join dim_phase1_district_data as d
        on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
        where  (date <= '{from_date}' and date >= '{to_date}')
        group by indicator,indicator_id,date,division_name,division_id_num,calc_type
        # and d.division_id_num = {division_id}
      modify: up_tsu_desktop_app.context_data_division(data, handler)
      # default:
      #   division_id: d.division_id_num

  up-tsu-desktop/context_data_state:
    pattern: /$YAMLURL/context_data_state
    handler: FormHandler
    kwargs:
      auth: *AUTH
      url: $connection_str
      query: SELECT d.indicator_name as indicator,
        d.indicator_id as indicator_id,
        avg(f.perc_point) as perc_point,
        avg(composite_index) as composite_index,
        avg(indicator_index) as indicator_index,
        date
        FROM fact_phase1_district_data_monthly as f
        left join dim_phase1_district_data as d
        on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
        where  (date <= '{from_date}' and date >= '{to_date}')
        group by indicator,indicator_id,date
      default:
        district: d.district_id_num

  up-tsu-desktop/division_data:
    pattern: /$YAMLURL/division_data
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data/district_scores.csv
      auth: *AUTH
    # cache: true

  # up-tsu-desktop/context_data_division:
  #   pattern: /$YAMLURL/context_data_division
  #   handler: FormHandler
  #   kwargs:
  #     url: $YAMLPATH/data/district_scores.csv
  #     modify: up_tsu_desktop_app.context_data_division(data, handler)
  #     auth: *AUTH
  # cache: true

  # up-tsu-desktop/context_data_state:
  #   pattern: /$YAMLURL/context_data_state
  #   handler: FormHandler
  #   kwargs:
  #     url: $YAMLPATH/data/district_scores.csv
  #     modify: up_tsu_desktop_app.context_data(data, handler)
  #     auth: *AUTH
  # cache: true

  up-tsu-desktop/block_data/register:
    pattern: /$YAMLURL/block_data_register
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/block_scores.csv
      query: select * from (
        SELECT t1.block_name as block, t1.district_name as district, t2.division_name as division
        FROM dim_phase1_block_data t1
        LEFT JOIN dim_phase1_district_data t2
        on t2.district_id_num = t1.district_id_num
        GROUP BY t1.block_name, t1.district_name, t2.division_name) as a
        where a.division is not null;
      modify: data.fillna(0)
      # modify: data.fillna(0)[['division', 'district', 'block']]
      default:
        _limit: 100000

  up-tsu-desktop/district_data_avg:
    pattern: /$YAMLURL/district_data_avg
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/district_scores.csv
      prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query:
        SELECT t1.composite_index, t1.perc_point,  t2.indicator_name AS indicator,
        t2.district_id, t2.district_name as district,
        t2.division_name as division, t2.map_id, t2.div_map_id
        FROM fact_phase1_district_data_monthly t1
        JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
        GROUP BY t2.indicator_name;
      auth: *AUTH
      default:
        _limit: 100000
    # cache: true

  # analyticts view
  up-tsu-desktop/district_data_compare:
    pattern: /$YAMLURL/district_data_compare
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/district_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      query:
        SELECT t1.composite_index, t1.perc_point,  t2.indicator_name AS indicator,
        t2.district_id, t2.district_name as district,
        t2.division_name as division, t2.map_id, t2.div_map_id,
        t2.type_name as type, t2.domain_name as domain,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_monthly t1
        JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        # WHERE t1.date = '{date}'
      # queryfunction: up_tsu_desktop_app.district_data_monthly(args)
      auth: *AUTH
      default:
        # date: '2020-07-01'
        _limit: 100000
    # cache: true

  up-tsu-desktop/district_quarter_data_compare:
    pattern: /$YAMLURL/district_quarter_data_compare
    handler: FormHandler
    kwargs:
      url: $connection_str ## $YAMLPATH/data/district_scores_quarter.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
        t2.district_name AS district, t2.division_name AS division, t2.map_id, t2.div_map_id,
        t2.type_name as type, t2.domain_name as domain,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date, t1.quarter, t1.year
        FROM fact_phase1_district_data_quaterly t1
        LEFT JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        # WHERE t1.year = {year} AND t1.quarter = {quarter}
      auth: *AUTH
    # cache: true

  up-tsu-desktop/district_year_data_compare:
    pattern: /$YAMLURL/district_year_data_compare
    handler: FormHandler
    kwargs:
      url: $connection_str ## $YAMLPATH/data/district_scores_year.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
        t2.district_name AS district, t2.division_name AS division, t2.map_id, t2.div_map_id,
        t2.type_name as type, t2.domain_name as domain,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date, t1.year
        FROM fact_phase1_district_data_yearly t1
        LEFT JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        # WHERE t1.year = {year}
      auth: *AUTH
    # cache: true

  up-tsu-desktop/block_data_compare:
    pattern: /$YAMLURL/block_data_compare
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/block_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      # query: SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
      #       t2.district_id, t2.district_name AS district,
      #       CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
      #       t2.type_name as type, t2.domain_name as domain,
      #       DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
      #       FROM fact_phase1_block_data_monthly t1
      #       LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
      #       AND t1.indicator_id = t2.indicator_id
      #       WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
      queryfunction: up_tsu_desktop_app.block_data_compare(args)
      auth: *AUTH
      default:
        _limit: 100000
    # cache: true

  up-tsu-desktop/block_quarter_data_compare:
    pattern: /$YAMLURL/block_quarter_data_compare
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/block_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      # query: SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
      #       t2.district_id, t2.district_name AS district,
      #       CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
      #       t2.type_name as type, t2.domain_name as domain,
      #       DATE_FORMAT(t1.date, '%Y-%m-%d') AS date, t1.year, t1.quarter
      #       FROM fact_phase1_block_data_quaterly t1
      #       LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
      #       AND t1.indicator_id = t2.indicator_id
      #       WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
      queryfunction: up_tsu_desktop_app.block_data_quarter_compare(args)
      auth: *AUTH
      default:
        _limit: 100000
    # cache: true

  up-tsu-desktop/block_year_data_compare:
    pattern: /$YAMLURL/block_year_data_compare
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/block_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      # query: SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
      #       t2.district_name AS district,
      #       CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
      #       t2.type_name as type, t2.domain_name as domain,
      #       DATE_FORMAT(t1.date, '%Y-%m-%d') AS date, t1.year
      #       FROM fact_phase1_block_data_yearly t1
      #       LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
      #       AND t1.indicator_id = t2.indicator_id
      #       WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
      queryfunction: up_tsu_desktop_app.block_data_year_compare(args)
      auth: *AUTH
      default:
        _limit: 100000
    # cache: true

  up-tsu-desktop/block_compare_hierachy:
    pattern: /$YAMLURL/block_compare_hierachy
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/block_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      query:
        SELECT distinct(district), division, block from (SELECT district, division, block, DATE_FORMAT(date, '%Y-%m-%d')
        AS date FROM analytics_dropdown_data
        WHERE date BETWEEN '{date>~}' AND '{date<~}') as e
        # GROUP BY t2.district_name, t2.block_name, t3.division_name
      auth: *AUTH
      default:
        _limit: 100000
    # cache: true

  # table view
  up-tsu-desktop/district_data:
    pattern: /$YAMLURL/district_data
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/district_scores.csv
      prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      query:
        SELECT t1.composite_index, t1.perc_point,  t2.indicator_name AS indicator,
        t2.district_id, t2.district_name as district,
        t2.division_name as division, t2.map_id, t2.div_map_id,
        t2.type_name as type, t2.domain_name as domain,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_monthly t1
        JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      # queryfunction: up_tsu_desktop_app.district_data_monthly(args)
      auth: *AUTH
      default:
        # date: '2020-07-01'
        _limit: 100000
    # cache: true

  up-tsu-desktop/district_quarter_data:
    pattern: /$YAMLURL/district_quarter_data
    handler: FormHandler
    kwargs:
      url: $connection_str ## $YAMLPATH/data/district_scores_quarter.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
        t2.district_name AS district, t2.division_name AS division, t2.map_id, t2.div_map_id,
        t2.type_name as type, t2.domain_name as domain
        FROM fact_phase1_district_data_quaterly t1
        LEFT JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.year = {year} AND t1.quarter = {quarter}
      auth: *AUTH
    # cache: true

  up-tsu-desktop/district_year_data:
    pattern: /$YAMLURL/district_year_data
    handler: FormHandler
    kwargs:
      url: $connection_str ## $YAMLPATH/data/district_scores_year.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
        t2.district_name AS district, t2.division_name AS division, t2.map_id, t2.div_map_id,
        t2.type_name as type, t2.domain_name as domain
        FROM fact_phase1_district_data_yearly t1
        LEFT JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.year = {year}
      auth: *AUTH
    # cache: true

  up-tsu-desktop/block_data:
    pattern: /$YAMLURL/block_data
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/block_scores.csv
      prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      # query: SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
      #         t2.district_id, t2.district_name AS district, t2.block_id_num as block_id, t2.block_name AS block
      #         FROM fact_phase1_block_data_monthly t1
      #         LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
      #         AND t1.indicator_id = t2.indicator_id
      #         WHERE t1.date = '{date}'

      # GROUP BY t2.block_id
      queryfunction: up_tsu_desktop_app.block_data_monthly_query(args)
      auth: *AUTH
      default:
        _limit: 100000
    # cache: true

  up-tsu-desktop/block_quarter_data:
    pattern: /$YAMLURL/block_quarter_data
    handler: FormHandler
    kwargs:
      url: $connection_str ## $YAMLPATH/data/block_scores_quarter.csv
      # query: SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
      #         t2.district_name AS district, t2.block_id_num as block_id, t2.block_name AS block
      #         FROM fact_phase1_block_data_quaterly t1
      #         LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
      #         AND t1.indicator_id = t2.indicator_id
      #         WHERE t1.year = {year} AND t1.quarter = {quarter}

      # GROUP BY t2.block_id
      queryfunction: up_tsu_desktop_app.block_data_quarterly_query(args)
      auth: *AUTH

  up-tsu-desktop/block_year_data:
    pattern: /$YAMLURL/block_year_data
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/block_scores_year.csv
      # query: SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
      #         t2.district_name AS district, t2.block_id_num as block_id, t2.block_name AS block
      #         FROM fact_phase1_block_data_yearly t1
      #         LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
      #         AND t1.indicator_id = t2.indicator_id
      #         WHERE t1.year = {year}

      # GROUP BY t2.block_id
      queryfunction: up_tsu_desktop_app.block_data_yearly_query(args)
      auth: *AUTH

  up-tsu-desktop/district_data_area:
    pattern: /$YAMLURL/district_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/district_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query:
        SELECT t1.composite_index, t1.perc_point,  t2.indicator_name AS indicator, t2.district_id,
        t2.district_name as district, t2.division_name as division, t2.map_id, t2.div_map_id as div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_monthly t1
        LEFT JOIN dim_phase1_district_data t2
        ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
        # where t1.date >= '{date>~}'  AND t1.date <= '{date<~}'
        # GROUP BY t1.date
      auth: *AUTH
      default:
        _limit: 100000
        # date: t1.date
        # indicator: t2.indicator_name
    # cache: true

  up-tsu-desktop/district_quarter_data_area:
    pattern: /$YAMLURL/district_quarter_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/district_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
        t2.district_name AS district, t2.division_name AS division,
        t2.map_id, t2.div_map_id, DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_quaterly t1
        JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        # WHERE t1.year = {year} AND t1.quarter = {quarter}
      auth: *AUTH
      default:
        _limit: 100000
        # date: t1.date
        # indicator: t2.indicator_name
    # cache: true

  up-tsu-desktop/district_year_data_area:
    pattern: /$YAMLURL/district_year_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/district_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
        t2.district_name AS district, t2.division_name AS division, t2.map_id, t2.div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_yearly t1
        LEFT JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
        # WHERE t1.year = {year}
      auth: *AUTH
      default:
        _limit: 100000
        # date: t1.date
        # indicator: t2.indicator_name
    # cache: true

  up-tsu-desktop/block_data_area:
    pattern: /$YAMLURL/block_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/district_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args(args, handler)
      # query:  SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
      #         t2.district_id, t2.district_name AS district,
      #         t2.block_id_num as block_id, t2.block_name AS block,
      #         DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
      #         FROM fact_phase1_block_data_monthly t1
      #         LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
      #         AND t2.indicator_id = t1.indicator_id

      #         WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
      queryfunction:
        up_tsu_desktop_app.block_area_data_monthly(args)
        # GROUP BY t2.block_id, t1.date
      auth: *AUTH
      default:
        _limit: 100000
        # date: t1.date
        # indicator: t2.indicator_name
    # cache: true

  up-tsu-desktop/block_quarter_data_area:
    pattern: /$YAMLURL/block_quarter_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str ## $YAMLPATH/data/block_scores_quarter.csv
      # query: SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
      #         t2.district_name AS district, t2.block_id_num as block_id,
      #         t2.block_name AS block, DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
      #         FROM fact_phase1_block_data_quaterly t1
      #         LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
      #         AND t2.indicator_id = t1.indicator_id
      queryfunction:
        up_tsu_desktop_app.block_area_data_quarterly(args)
        # WHERE t1.year = {year} AND t1.quarter = {quarter}
        # GROUP BY t2.block_id
      auth: *AUTH

  up-tsu-desktop/block_year_data_area:
    pattern: /$YAMLURL/block_year_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data/block_scores_year.csv
      # query: SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
      #         t2.district_name AS district, t2.block_id_num as block_id, t2.block_name AS block,
      #         DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
      #         FROM fact_phase1_block_data_yearly t1
      #         LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
      #         AND t2.indicator_id = t1.indicator_id
      #         WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
      queryfunction:
        up_tsu_desktop_app.block_area_data_yearly(args)
        # WHERE t1.year = {year}
        # GROUP BY t2.block_id
      auth: *AUTH

  # up-tsu-desktop/division_monthly_data:
  #   pattern: /$YAMLURL/division_monthly_data
  #   handler: FormHandler
  #   kwargs:
  #     url: $YAMLPATH/data/division_scores.csv
  #     auth: *AUTH
  #   # cache: true

  # up-tsu-desktop/division_quarter_data:
  #   pattern: /$YAMLURL/division_quarter_data
  #   handler: FormHandler
  #   kwargs:
  #     url: $YAMLPATH/data/division_scores_quarter.csv
  #     auth: *AUTH
  #   # cache: true

  # up-tsu-desktop/division_year_data:
  #   pattern: /$YAMLURL/division_year_data
  #   handler: FormHandler
  #   kwargs:
  #     url: $YAMLPATH/data/division_scores_year.csv
  #     auth: *AUTH
  #   # cache: true

  bmgf-up-tsu-last-update-desktop:
    pattern: /$YAMLURL/last_update
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query: select max(date) as date from fact_phase1_district_data_monthly
      modify: up_tsu_desktop_app.get_last_update(data)
      auth: *AUTH
      default:
        _limit: 100000
    # cache: true

  bmgf-up-tsu-last-update-desktop_noauth:
    pattern: /$YAMLURL/last_update_noauth
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query: select max(date) as date from fact_cm_district_data_monthly
      # modify: up_tsu_desktop_app.get_last_update(data)
      default:
        _limit: 100000
    # cache: true

  up-tsu-desktop/profile_data:
    pattern: /$YAMLURL/profile_data
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data/district_profile_stats.csv
      auth: *AUTH
    cache: true

  up-tsu-district_id_name:
    pattern: /$YAMLURL/district_id_name
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select distinct district_id_num as district_id,district_name from dim_phase1_district_data
      auth: *AUTH

  up-tsu-division_id_name:
    pattern: /$YAMLURL/division_id_name
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select distinct division_id_num as division_id,division_name from dim_phase1_district_data
      auth: *AUTH

  up-tsu-mapview:
    pattern: /$YAMLURL/mapview
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $connection_str
        query: SELECT avg(composite_index) as composite_index,date
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where (f.date = '{to_date}' or f.date = '{from_date}') and f.indicator_id=1
          and d.map_id = {map_id}
          group by date order by date desc;
        default:
          map_id: d.map_id
      overall_indicators:
        url: $connection_str
        query: SELECT d.indicator_name as indicator,d.type_name as type,
          d.domain_name as domain,avg(f.perc_point) as perc_point,
          d.indicator_id as indicator_id
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where date = '{from_date}' and d.map_id = {map_id}
          group by indicator,type,domain,indicator_id;
        default:
          map_id: d.map_id

  up-tsu-mapview-yr:
    pattern: /$YAMLURL/mapview_yr
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $connection_str
        query: SELECT avg(composite_index) as composite_index,year
          FROM fact_phase1_district_data_yearly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where (f.year = '{from_year}' or f.year = '{to_year}') and f.indicator_id=1
          and d.map_id = {map_id}
          group by year order by year desc;
        default:
          map_id: d.map_id
      overall_indicators:
        url: $connection_str
        query: SELECT d.indicator_name as indicator,d.type_name as type,
          d.domain_name as domain,avg(f.perc_point) as perc_point,
          d.indicator_id as indicator_id
          FROM fact_phase1_district_data_yearly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where f.year = '{from_year}' and d.map_id = {map_id}
          group by indicator,type,domain,indicator_id;
        default:
          map_id: d.map_id

  up-tsu-mapview-qa:
    pattern: /$YAMLURL/mapview_qa
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $connection_str
        query: SELECT avg(composite_index) as composite_index,year
          FROM fact_phase1_district_data_quaterly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where ((f.year = {from_year} and f.quarter = {from_quater})
          or (f.year = '{to_year}' and f.quarter = {to_quater})) and f.indicator_id={indicator_id}
          and d.map_id = {map_id}
          group by year,quarter order by f.year desc;
        default:
          map_id: d.map_id
          indicator_id: d.indicator_id
      overall_indicators:
        url: $connection_str
        query: SELECT d.indicator_name as indicator,d.type_name as type,
          d.domain_name as domain,avg(f.perc_point) as perc_point,
          d.indicator_id as indicator_id
          FROM fact_phase1_district_data_quaterly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where (f.year = {from_year} and f.quarter = {from_quater})
          and d.map_id = {map_id}
          group by indicator,type,domain,indicator_id;
        default:
          map_id: d.map_id

  up-tsu-mapview-division:
    pattern: /$YAMLURL/mapview_division
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $connection_str
        query: SELECT avg(composite_index) as composite_index,date
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where (f.date = '{to_date}' or f.date = '{from_date}') and f.indicator_id=1
          and d.div_map_id = {div_map_id}
          group by date order by date desc;
        default:
          map_id: d.div_map_id
      overall_indicators:
        url: $connection_str
        query: SELECT d.indicator_name as indicator,d.type_name as type,
          d.domain_name as domain,avg(f.perc_point) as perc_point,
          d.indicator_id as indicator_id
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where date = '{from_date}' and d.div_map_id = {div_map_id}
          group by indicator,type,domain,indicator_id;
        default:
          map_id: d.div_map_id

  up-tsu-mapview_division_qa:
    pattern: /$YAMLURL/mapview_division_qa
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $connection_str
        query: SELECT avg(composite_index) as composite_index,year
          FROM fact_phase1_district_data_quaterly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where ((f.year = {from_year} and f.quarter = {from_quater}) or
          (f.year = '{to_year}' and f.quarter = {to_quater})) and f.indicator_id=1
          and d.div_map_id = {div_map_id}
          group by year,quarter order by date desc;
        default:
          map_id: d.div_map_id
      overall_indicators:
        url: $connection_str
        query: SELECT d.indicator_name as indicator,d.type_name as type,
          d.domain_name as domain,avg(f.perc_point) as perc_point,
          d.indicator_id as indicator_id
          FROM fact_phase1_district_data_quaterly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where (f.year = {from_year} and f.quarter = {from_quater})
          and d.div_map_id = {div_map_id} group by indicator,type,domain,indicator_id;
        default:
          map_id: d.div_map_id

  up-tsu-mapview-division-year:
    pattern: /$YAMLURL/mapview_division_yr
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $connection_str
        query: SELECT avg(composite_index) as composite_index,year
          FROM fact_phase1_district_data_yearly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where (f.year = '{to_year}' or f.year = '{from_year}') and f.indicator_id=1
          and d.div_map_id = {div_map_id}
          group by year order by year desc;
        default:
          map_id: d.div_map_id
      overall_indicators:
        url: $connection_str
        query: SELECT d.indicator_name as indicator,d.type_name as type,
          d.domain_name as domain,avg(f.perc_point) as perc_point,
          d.indicator_id as indicator_id
          FROM fact_phase1_district_data_yearly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where f.year = '{from_year}' and d.div_map_id = {div_map_id}
          group by indicator,type,domain,indicator_id;
        default:
          map_id: d.div_map_id

  # up-tsu-phas1-max-date:
  #   pattern: /$YAMLURL/phase1_max_date
  #   handler: FormHandler
  #   kwargs:
  #     auth: *AUTH
  #     url: $connection_str
  #     query: select max(date) as date from fact_phase1_district_data_monthly;

  up-tsu-amethi-mapview:
    pattern: /$YAMLURL/amethi_mapview
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.overall(data, handler,filters = 'amethi')
      overall_indicators:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.overall_indicators(data, handler, filters = 'amethi')
      stackbar_data_type:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.stack_bar_summary(data, handler, 'type', filters = 'amethi')
      stackbar_data_domain:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.stack_bar_summary(data, handler, 'domain', filters = 'amethi')
      indicators_by_type:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.indicators_by_type(data, handler, filters ='amethi')
      indicators_by_domain:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.indicators_by_domain(data, handler, filters ='amethi')

  up-tsu-mapview-block:
    pattern: /$YAMLURL/mapview_block
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $connection_str
        query: SELECT avg(composite_index) as composite_index,date
          FROM fact_phase1_block_data_monthly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and d.block_id_num =f.block_id_num
          where (f.date = '{from_date}' or f.date = '{to_date}') and f.indicator_id=1
          and d.map_id = {map_id}
          group by date order by date desc;
        default:
          map_id: d.map_id
      overall_indicators:
        url: $connection_str
        query: SELECT d.indicator_name as indicator,d.type_name as type,
          d.domain_name as domain,avg(f.perc_point) as perc_point,
          d.indicator_id as indicator_id
          FROM fact_phase1_block_data_monthly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and d.block_id_num =f.block_id_num
          where date = '{from_date}' and d.map_id = {map_id}
          group by indicator,type,domain,indicator_id;
        default:
          map_id: d.map_id

  up-tsu-mapview-block-year:
    pattern: /$YAMLURL/mapview_block_yr
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $connection_str
        query: SELECT avg(composite_index) as composite_index,year
          FROM fact_phase1_block_data_yearly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and d.block_id_num =f.block_id_num
          where (f.year = '{from_year}' or f.year = '{to_year}') and f.indicator_id=1
          and d.map_id = {map_id}
          group by year order by year desc;
        default:
          map_id: d.map_id
      overall_indicators:
        url: $connection_str
        query: SELECT d.indicator_name as indicator,d.type_name as type,
          d.domain_name as domain,avg(f.perc_point) as perc_point,
          d.indicator_id as indicator_id
          FROM fact_phase1_block_data_yearly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and d.block_id_num =f.block_id_num
          where f.year = '{from_year}' and d.map_id = {map_id}
          group by indicator,type,domain,indicator_id;
        default:
          map_id: d.map_id

  up-tsu-mapview-block-quarter:
    pattern: /$YAMLURL/mapview_block_qa
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $connection_str
        query: SELECT avg(composite_index) as composite_index,year
          FROM fact_phase1_block_data_quaterly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and d.block_id_num =f.block_id_num
          where ((f.year = {from_year} and f.quarter = {from_quater})
          or (f.year = {to_year} and f.quarter = {to_quater})) and f.indicator_id=1
          and d.map_id = {map_id}
          group by year,quarter order by date desc;
        default:
          map_id: d.map_id
      overall_indicators:
        url: $connection_str
        query: SELECT d.indicator_name as indicator,d.type_name as type,
          d.domain_name as domain,avg(f.perc_point) as perc_point,
          d.indicator_id as indicator_id
          FROM fact_phase1_block_data_quaterly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and d.block_id_num =f.block_id_num
          where (f.year = {from_year} and f.quarter = {from_quater}) and d.map_id = {map_id}
          group by indicator,type,domain,indicator_id;
        default:
          map_id: d.map_id

  up-tsu-mapview-amethi:
    pattern: /$YAMLURL/mapview_amethi
    handler: FormHandler
    kwargs:
      auth: *AUTH
      overall:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.overall(data, handler,filters = 'amethi')
        default:
          _limit: 100000
      overall_indicators:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.overall_indicators(data, handler, filters = 'amethi')
        default:
          _limit: 100000
      stackbar_data_type:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.stack_bar_summary(data, handler, 'type', filters = 'amethi')
        default:
          _limit: 100000
      stackbar_data_domain:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.stack_bar_summary(data, handler, 'domain', filters = 'amethi')
        default:
          _limit: 100000
      indicators_by_type:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.indicators_by_type(data, handler, filters ='amethi')
        default:
          _limit: 100000
      indicators_by_domain:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.indicators_by_domain(data, handler, filters ='amethi')
        default:
          _limit: 100000

  up-tsu-mapview/district:
    pattern: /$YAMLURL/district_view
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query:
          SELECT d.district_name as district,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,
          f.composite_rank,f.date as date,
          d.map_id as map_id,d.district_id_num as dist_id,
          avg(indicator_index) as indicator_index
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and
          d.district_id_num =f.district_id_num
          where (date <= '{from_date}' and date >= '{to_date}')
          and d.indicator_id = {indicator_id} and d.division_id_num = {division}
          group by district,date,composite_rank,map_id,dist_id;
        default:
          indicator_id: d.indicator_id
          division: d.division_id_num

  up-tsu-mapview/district_rank:
    pattern: /$YAMLURL/district_rank
    handler: FormHandler
    kwargs:
      auth: *AUTH
      url: $connection_str
      query: SELECT  indicator_id, composite_rank,indicator_index
        FROM fact_phase1_district_data_monthly
        where (date = '{from_date}') and district_id_num = {district}
      modify: up_tsu_desktop_app.district_rank(data,handler)
      default:
        district: district_id_num

  up-tsu-mapview/district_rank_quarter:
    pattern: /$YAMLURL/district_rank_qa
    handler: FormHandler
    kwargs:
      auth: *AUTH
      url: $connection_str
      query: SELECT  indicator_id, composite_rank,indicator_index
        FROM fact_phase1_district_data_quaterly
        where (year = {from_year} and quarter = {from_quater})
        and district_id_num = {district}
      modify: up_tsu_desktop_app.district_rank(data,handler)
      default:
        district: district_id_num

  up-tsu-mapview/district_rank_year:
    pattern: /$YAMLURL/district_rank_year
    handler: FormHandler
    kwargs:
      auth: *AUTH
      url: $connection_str
      query: SELECT  indicator_id, composite_rank,indicator_index
        FROM fact_phase1_district_data_yearly
        where (year = {from_year}) and district_id_num = {district}
      modify: up_tsu_desktop_app.district_rank(data,handler)
      default:
        district: district_id_num

  up-tsu-mapview/district-year:
    pattern: /$YAMLURL/district_view_yr
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query:
          SELECT d.district_name as district,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,f.composite_rank,
          f.year as year,f.date as date, d.district_id_num as dist_id,
          d.map_id as map_id,avg(indicator_index) as indicator_index
          FROM fact_phase1_district_data_yearly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where (f.year <= {from_year} and f.year >= {to_year})
          and d.indicator_id = {indicator_id} and d.division_id_num = {division}
          group by district,year,composite_rank,map_id,f.date;
        default:
          indicator_id: d.indicator_id
          division: d.division_id_num

  up-tsu-mapview/district-quarter:
    pattern: /$YAMLURL/district_view_qa
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query:
          SELECT d.district_name as district,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,f.composite_rank,
          f.quarter as quarter,f.year as year, d.district_id_num as dist_id,
          d.map_id as map_id,avg(indicator_index) as indicator_index
          FROM fact_phase1_district_data_quaterly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where ((f.year = {from_year} and f.quarter = {from_quater}) or (f.year = {to_year}
          and f.quarter = {to_quater})) and d.indicator_id = {indicator_id}
          and d.division_id_num = {division}
          group by district,year,quarter,map_id;
        default:
          indicator_id: d.indicator_id
          division: d.division_id_num

  up-tsu-mapview/district-quarter-trend:
    pattern: /$YAMLURL/district_view_qa_trend
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query:
          SELECT d.district_name as district,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,f.composite_rank,
          f.quarter as quarter,f.year as year,f.date as date,
          d.map_id as map_id,d.district_id_num as dist_id,
          avg(indicator_index) as indicator_index
          FROM fact_phase1_district_data_quaterly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where (date <= '{from_date}' and date >= '{to_date}')
          and d.indicator_id = {indicator_id}
          and d.division_id_num = {division}
          group by district,year,quarter,composite_rank,map_id,f.date,dist_id;
        default:
          indicator_id: d.indicator_id
          division: d.division_id_num

  up-tsu-mapview/district-year-one:
    pattern: /$YAMLURL/indicators
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $YAMLPATH/data/district_scores_year.csv
        function: data.groupby(['type', 'indicator', 'indicator_id'], as_index=False)['district_id'].count()
      data_domain:
        url: $YAMLPATH/data/district_scores_year.csv
        function: data.groupby(['domain', 'indicator', 'indicator_id'], as_index=False)['district_id'].count()
    # cache: true

  up-tsu-mapview/district-block-indicators:
    pattern: /$YAMLURL/indicators_block
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $YAMLPATH/data/block_scores.csv
        function: data.groupby(['type', 'indicator', 'indicator_id'], as_index=False)['district_id'].count()
      data_domain:
        url: $YAMLPATH/data/block_scores.csv
        function: data.groupby(['domain', 'indicator', 'indicator_id'], as_index=False)['district_id'].count()
    # cache: true

  up-tsu-mapview/division-quarter:
    pattern: /$YAMLURL/division_view_qa
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query:
          SELECT d.division_name as division,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,f.quarter as quarter,
          d.div_map_id as map_id,d.division_id_num as div_id,f.year,
          avg(indicator_index) as indicator_index
          FROM fact_phase1_district_data_quaterly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where ((f.year = {from_year} and f.quarter = {from_quater}) or (f.year = {to_year}
          and f.quarter = {to_quater})) and d.indicator_id = {indicator_id}
          group by division,year,quarter,d.div_map_id,div_id;
        default:
          indicator_id: d.indicator_id

  up-tsu-mapview/division-quarter-trend:
    pattern: /$YAMLURL/division_view_qa_trend
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query:
          SELECT d.division_name as division,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,
          f.quarter as quarter,f.year as year,f.date as date,
          d.div_map_id as map_id,d.division_id_num as div_id,
          avg(indicator_index) as indicator_index
          FROM fact_phase1_district_data_quaterly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where (date <= '{from_date}' and date >= '{to_date}')
          and d.indicator_id = {indicator_id}
          group by division,year,quarter,d.div_map_id,div_id,f.date;
        default:
          indicator_id: d.indicator_id

  up-tsu-mapview/division:
    pattern: /$YAMLURL/division_view
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query:
          SELECT d.division_name as division,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,f.date as date,
          d.div_map_id as map_id,d.division_id_num as div_id,
          avg(indicator_index) as indicator_index
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id
          and d.district_id_num =f.district_id_num
          where (date <= '{from_date}' and date >= '{to_date}')
          and d.indicator_id = {indicator_id}
          group by division,date,d.div_map_id,div_id;
        default:
          indicator_id: d.indicator_id
    # cache: true
  up-tsu-mapview/division-year:
    pattern: /$YAMLURL/division_view_yr
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query:
          SELECT d.division_name as division,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,
          f.year as year,f.date as date,
          d.div_map_id as map_id,
          d.division_id_num as div_id,avg(indicator_index) as indicator_index
          FROM fact_phase1_district_data_yearly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and d.district_id_num =f.district_id_num
          where (f.year <= '{from_year}' and f.year >= '{to_year}')
          and d.indicator_id = {indicator_id}
          group by division,year,d.div_map_id,div_id,f.date;
        default:
          indicator_id: d.indicator_id
    # cache: true

  up-tsu-mapview/block:
    pattern: /$YAMLURL/block_view
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query: SELECT d.block_name as block,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,f.composite_rank,f.date as date,
          d.map_id as map_id,avg(indicator_index) as indicator_index
          FROM fact_phase1_block_data_monthly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and d.block_id_num =f.block_id_num
          where (date <= '{from_date}' and date >= '{to_date}')
          and d.district_id_num = '{district}'
          and d.indicator_id = {indicator_id}
          group by block,date,composite_rank,map_id;
        default:
          indicator_id: d.indicator_id
          district: d.district_id_num

  up-tsu-mapview/block-year:
    pattern: /$YAMLURL/block_view_yr
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query: SELECT d.block_name as block,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,f.composite_rank,
          f.year as year,f.date as date,
          d.map_id as map_id,avg(indicator_index) as indicator_index
          FROM fact_phase1_block_data_yearly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and d.block_id_num =f.block_id_num
          where (f.year <= '{from_year}' or f.year >= '{to_year}')
          and d.district_id_num = '{district}'
          and d.indicator_id = {indicator_id}
          group by block,year,composite_rank,map_id,f.date;
        default:
          indicator_id: d.indicator_id
          district: d.district_id_num

  up-tsu-mapview/block-quarter:
    pattern: /$YAMLURL/block_view_qa
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query: SELECT d.block_name as block,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,f.composite_rank,
          f.quarter as quarter,f.year,
          d.map_id as map_id,avg(indicator_index) as indicator_index
          FROM fact_phase1_block_data_quaterly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and d.block_id_num =f.block_id_num
          where ((f.year = {from_year} and f.quarter = {from_quater})
          or (f.year = {to_year} and f.quarter = {to_quater}))
          and d.district_id_num = '{district}'
          and d.indicator_id = {indicator_id}
          group by block,f.year,quarter,composite_rank,map_id;
        default:
          indicator_id: d.indicator_id
          district: d.district_id_num

  up-tsu-mapview/block-quarter-trend:
    pattern: /$YAMLURL/block_view_qa_trend
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query: SELECT d.block_name as block,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,f.composite_rank,
          f.quarter as quarter,f.year as year,f.date as date,
          d.map_id as map_id,avg(indicator_index) as indicator_index
          FROM fact_phase1_block_data_quaterly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and d.block_id_num =f.block_id_num
          where (date <= '{from_date}' and date >= '{to_date}')
          and d.district_id_num = '{district}'
          and d.indicator_id = {indicator_id}
          group by block,year,quarter,composite_rank,map_id,f.date;
        default:
          indicator_id: d.indicator_id
          district: d.district_id_num

  up-tsu-mapview/district_view_exe:
    pattern: /$YAMLURL/district_view_exe
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query:
          SELECT d.district_name as district,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,
          f.composite_rank,f.date as date,
          d.map_id as map_id,d.district_id_num as dist_id,
          avg(indicator_index) as indicator_index
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id and
          d.district_id_num =f.district_id_num
          where (date <= '{from_date}' and date >= '{to_date}')
          and d.division_id_num = {division}
          group by district,date,composite_rank,map_id,dist_id
          order by composite_index desc ,district asc;
        default:
          division: d.division_id_num

  up-tsu-mapview/division_view_exe:
    pattern: /$YAMLURL/division_view_exe
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $connection_str
        query:
          SELECT d.division_name as division,avg(f.perc_point) as perc_point,
          avg(f.composite_index) as composite_index,f.date as date,
          d.div_map_id as map_id,d.division_id_num as div_id,
          avg(indicator_index) as indicator_index
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d
          on d.indicator_id = f.indicator_id
          and d.district_id_num =f.district_id_num
          where (date <= '{from_date}' and date >= '{to_date}')
          and d.indicator_id = {indicator_id}
          group by division,date,d.div_map_id,div_id
          order by composite_index desc, division asc;
        default:
          indicator_id: d.indicator_id
  
  # up-tsu-mapview/division_view_exe:
  #   pattern: /$YAMLURL/division_view_exe
  #   handler: FormHandler
  #   kwargs:
  #     auth: *AUTH
  #     data:
  #       url: $connection_str
  #       query:
  #         WITH BottomDistricts AS (
  #         SELECT
  #         t2.district_id AS div_id,
  #         t2.district_name AS division,
  #         t2.map_id AS map_id,
  #         t2.division_name AS division_u,
  #         AVG(t1.composite_index) AS avg_composite_index
  #         FROM fact_phase1_district_data_monthly t1
  #         JOIN dim_phase1_district_data t2
  #         ON t2.district_id_num = t1.district_id_num
  #         AND t1.indicator_id = t2.indicator_id
  #         WHERE t1.date IN ('2024-10-01')
  #         GROUP BY t2.district_id, t2.district_name, t2.map_id, t2.division_name
  #         ORDER BY avg_composite_index ASC
  #         LIMIT 10
  #         )
  #         SELECT
  #         AVG(t1.composite_index) AS composite_index,
  #         t2.district_id AS div_id,
  #         t2.district_name AS division,
  #         t2.map_id AS map_id,
  #         t2.division_name AS division_u,
  #         DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
  #         FROM fact_phase1_district_data_monthly t1
  #         JOIN dim_phase1_district_data t2
  #         ON t2.district_id_num = t1.district_id_num
  #         AND t1.indicator_id = t2.indicator_id
  #         JOIN BottomDistricts bd
  #         ON t2.district_id = bd.div_id
  #         WHERE t1.date IN ('2024-10-01', '2024-09-01', '2024-08-01')
  #         GROUP BY t2.district_id, t2.district_name, t2.map_id, t2.division_name, t1.date
  #         ORDER BY 
  #         CASE 
  #         WHEN t1.date = '2024-10-01' THEN 1
  #         WHEN t1.date = '2024-09-01' THEN 2
  #         WHEN t1.date = '2024-08-01' THEN 3
  #         END,
  #         CASE 
  #         WHEN t1.date = '2024-09-01' THEN -AVG(t1.composite_index)
  #         WHEN t1.date = '2024-08-01' THEN -AVG(t1.composite_index)
  #         ELSE AVG(t1.composite_index)
  #         END,
  #         t2.division_name ASC;
          
  #       default:
  #         indicator_id: d.indicator_id

  up-tsu-mapview/amethi:
    pattern: /$YAMLURL/amethi_view
    handler: FormHandler
    kwargs:
      auth: *AUTH
      data:
        url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
        modify: up_tsu_desktop_app.block_view(data, handler,filters = 'amethi')
        default:
          _limit: 100000000

  up-tsu-desktop/capture:
    pattern: /$YAMLURL/capture
    handler: CaptureHandler
    kwargs:
      engine: chrome
      timeout: 60
      port: 8901

  up-tsu-mapview/division_level:
    pattern: /$YAMLURL/division_level
    handler: FileHandler
    kwargs:
      auth: *AUTH
      path: $YAMLPATH/data/up-divisions.topo.json
      headers: *headers
    cache: true

  up-tsu-desktop/get-unique-list_cmo:
    pattern: /$YAMLURL/get_unique_list_cmo
    handler: FilterHandler
    kwargs:
      auth: *AUTH
      url: $YAMLPATH/data_cmo/district_cmo_scores.csv

  up-tsu-mapview/district_level:
    pattern: /$YAMLURL/district_level
    handler: FileHandler
    kwargs:
      auth: *AUTH
      path: $YAMLPATH/data/up-districts-view.json
      headers: *headers
    cache: true

  up-tsu-mapview/block_level:
    pattern: /$YAMLURL/block_level
    handler: FileHandler
    kwargs:
      auth: *AUTH
      path: $YAMLPATH/data/up-districts.json
      headers: *headers
    cache: true

  up-tsu-desktop/get-list:
    pattern: /$YAMLURL/get_list
    handler: FormHandler
    kwargs:
      auth: *AUTH
      division:
        # url: $YAMLPATH/data/divisions-districts-mapping.csv
        # function: data.groupby('division').count().reset_index()
        url: $connection_str # $YAMLPATH/data/divisions-districts-mapping.csv
        query:
          SELECT district_name AS district, div_map_id, map_id, division_name AS division
          FROM dim_phase1_district_data GROUP BY division_id_num;
      district:
        # url: $YAMLPATH/data/divisions-districts-mapping.csv
        # function: data.groupby('district').count().reset_index()
        url: $connection_str # $YAMLPATH/data/divisions-districts-mapping.csv
        query:
          SELECT district_name AS district, div_map_id, map_id, division_name AS division
          FROM dim_phase1_district_data GROUP BY district_id_num;
      # block:
      #   url: $YAMLPATH/data/block_scores.csv
      #   function: data.groupby('block').count().reset_index()
      block:
        url: $connection_str # $YAMLPATH/data/block_scores.csv
        query: SELECT block_name AS block, district_name AS district
          FROM dim_phase1_block_data
          GROUP BY block_id_num, district_id_num;

  up-tsu-desktop/get-list_noauth:
    pattern: /$YAMLURL/get_list_noauth
    handler: FormHandler
    kwargs:
      division:
        # url: $YAMLPATH/data/divisions-districts-mapping.csv
        # function: data.groupby('division').count().reset_index()
        url: $connection_str # $YAMLPATH/data/divisions-districts-mapping.csv
        query:
          SELECT district_name AS district, div_map_id, division_name AS division
          FROM dim_cm_district_data GROUP BY division_id_num;
      district:
        # url: $YAMLPATH/data/divisions-districts-mapping.csv
        # function: data.groupby('district').count().reset_index()
        url: $connection_str # $YAMLPATH/data/divisions-districts-mapping.csv
        query:
          SELECT district_name AS district, div_map_id, division_name AS division
          FROM dim_cm_district_data GROUP BY district_id_num;
      block:
        # url: $YAMLPATH/data/block_scores.csv
        # function: data.groupby('block').count().reset_index()
        url: $connection_str # $YAMLPATH/data/block_scores.csv
        query: SELECT block_name AS block, district_name AS district
          FROM dim_cm_block_data
          GROUP BY block_id_num, district_id_num;

  up-tsu-desktop/get-unique-list:
    pattern: /$YAMLURL/get_unique_list
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query: SELECT indicator_name as indicator FROM dim_phase1_district_data group by indicator_id
      # query: SELECT DISTINCT indicator_name as indicator FROM dim_phase1_district_data ORDER BY indicator_name
      auth: *AUTH

  up-tsu-desktop/get-unique-block-ind-list:
    pattern: /$YAMLURL/get_unique_block_ind_list
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query: SELECT indicator_name as indicator FROM dim_phase1_block_data group by indicator_id
      # query: SELECT DISTINCT indicator_name as indicator FROM dim_phase1_district_data ORDER BY indicator_name
      auth: *AUTH

  up-tsu-desktop/get-unique-block-ind-list_niti:
    pattern: /$YAMLURL/get_unique_block_ind_list_niti
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query: SELECT indicator_name as indicator FROM dim_niti_block_data group by indicator_id
      # query: SELECT DISTINCT indicator_name as indicator FROM dim_phase1_district_data ORDER BY indicator_name
      auth: *AUTH

  up-tsu-desktop/get-unique-block-ind-list_cm:
    pattern: /$YAMLURL/get_unique_block_ind_list_cm
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query: SELECT indicator_name as indicator FROM dim_cm_block_data group by indicator_id
      # query: SELECT DISTINCT indicator_name as indicator FROM dim_phase1_district_data ORDER BY indicator_name
      auth: *AUTH

  up-tsu-desktop/get-unique-list_niti:
    pattern: /$YAMLURL/get_unique_list_niti
    handler: FormHandler
    kwargs:
      auth: *AUTH
      url: $connection_str # $YAMLPATH/data_niti/district_niti_scores.csv
      query: SELECT indicator_name as indicator FROM dim_niti_district_data
        group by indicator_id order by indicator_name;

  up-tsu-desktop/get-unique-list-cm:
    pattern: /$YAMLURL/get_unique_list_cm
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data_niti/district_niti_scores.csv
      query: SELECT indicator_name as indicator FROM dim_cm_district_data
        group by indicator_id order by indicator_name;

  up-tsu-mapview/indicator_rank:
    pattern: /$YAMLURL/indicators_rank
    handler: FormHandler
    kwargs:
      auth: *AUTH
      indicator_rank:
        url: $YAMLPATH/data/district_scores.csv
        function:
          data.groupby(['date', 'map_id', 'district', 'indicator_id', 'indicator_rank'],
          as_index=False)['district_id'].count()
      composite_rank:
        url: $YAMLPATH/data/district_scores.csv
        function: data.groupby(['date', 'map_id', 'district', 'composite_rank'], as_index=False)['district_id'].count()

  up-tsu-mapview/indicator_rank_quarter:
    pattern: /$YAMLURL/indicators_rank_qa
    handler: FormHandler
    kwargs:
      auth: *AUTH
      indicator_rank:
        url: $YAMLPATH/data/district_scores_quarter.csv
        function:
          data.groupby(['quarter', 'year', 'map_id', 'district', 'indicator_id', 'indicator_rank'],
          as_index=False)['district_id'].count()
      composite_rank:
        url: $YAMLPATH/data/district_scores_quarter.csv
        function:
          data.groupby(['quarter', 'year', 'map_id', 'district', 'composite_rank'],
          as_index=False)['district_id'].count()

  up-tsu-mapview/indicator_rank_year:
    pattern: /$YAMLURL/indicators_rank_yr
    handler: FormHandler
    kwargs:
      auth: *AUTH
      indicator_rank:
        url: $YAMLPATH/data/district_scores_year.csv
        function:
          data.groupby(['year', 'map_id', 'district', 'indicator_id', 'indicator_rank'],
          as_index=False)['district_id'].count()
      composite_rank:
        url: $YAMLPATH/data/district_scores_year.csv
        function: data.groupby(['year', 'map_id', 'district', 'composite_rank'], as_index=False)['district_id'].count()

  up-tsu-desktop/compare:
    pattern: /$YAMLURL/compare
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/compare.html
      auth: *AUTH
      template: true
      headers: *FILEHEADER
      config:
        date: "2023-01-01"
        month: "Jan"
        quarter: "Q4"
        year: 2022
        parameter: "composite_index"
        filter_type: "indicator"
        view: "time"
        district: ["Agra", "Prayagraj"]
        block: ["Aaspurdavsra", "Aeliya"]
        division: ["Agra Division", "Prayagraj Division"]
        select: "division"

  bmgf-up-tsu/get-list1:
    pattern: /$YAMLURL/districts_all
    handler: FormHandler
    kwargs:
      auth: *AUTH
      url: $YAMLPATH/data/divisions-districts-mapping.csv

  up-tsu-desktop/approve-user:
    pattern: /$YAMLURL/user_approval
    handler: FunctionHandler
    kwargs:
      function: up_tsu_desktop_app.user_approval

  up-tsu-desktop/admin-module:
    pattern: /$YAMLURL/admin
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/admin.html
      auth:
        login_url: /$YAMLURL/login
        membership:
          designation: [Admin]
      template: true
      

  up-tsu-desktop/user-analysis:
    pattern: /$YAMLURL/analysis
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/user-analysis.html
      auth:
        login_url: /$YAMLURL/login
        membership:
          designation: [Admin]
      template: true
      

  up-tsu-desktop/analysis-data:
    pattern: /$YAMLURL/analysis_data
    handler: FormHandler
    kwargs:
      url: sqlite:///$GRAMEXDATA/up-tsu-desktop/logviewer.db
      query: "select time as 'Date', [user.id] as 'User', uri as 'Screen',
        time(sum(session_time_sum), 'unixepoch') as 'Total Time Spent',
        sum(duration_count) as 'Number of times visited',
        time(sum(session_time_sum)/sum(duration_count), 'unixepoch') as 'Avg Time Spent'
        from aggD group by time, [user.id], uri
        having uri_1 = 1 and [user.id_1] = 1"
      modify: up_tsu_desktop_app.modify_analysis(data)
      

  unique_district_blocks:
    pattern: /$YAMLURL/unique_district_blocks
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/block_scores.csv
      query: SELECT district_name as district FROM dim_phase1_district_data group by district_id_num;
      # modify: data.drop_duplicates()
      auth: *AUTH

  # unique_divisions:
  #   pattern: /$YAMLURL/unique_divisions
  #   handler: FormHandler
  #   kwargs:
  #     url: $connection_str # $YAMLPATH/data/district_scores.csv
  #     query: SELECT division_name as division FROM dim_phase1_district_data group by division_id_num;
  #     # modify: data.drop_duplicates()
  #     auth: *AUTH

  unique_district:
    pattern: /$YAMLURL/unique_district
    handler: FormHandler
    kwargs:
      url: $connection_str
      query:
        select distinct district_name as district from dim_phase1_district_data
        where division_id_num = {division};
      default:
        division: division_id_num
      auth: *AUTH

  unique_blocks:
    pattern: /$YAMLURL/unique_blocks
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select distinct block_name as block from dim_phase1_block_data
        where district_id_num = {district};
      default:
        district: district_id_num
      auth: *AUTH

  unique_divisions:
    pattern: /$YAMLURL/unique_divisions
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select distinct division_name as division from dim_phase1_district_data;
      auth: *AUTH

  uptsu-form-changepassword:
    pattern: /$YAMLURL/password
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/set_password.html
      template: true
      # redirect:
      #   url: /$YAMLURL/logout
  uptsu-form-setpassword:
    pattern: /$YAMLURL/save-password
    handler: FunctionHandler
    kwargs:
      function: up_tsu_desktop_app.save_password
  up-tsu-desktop/inactiveusers:
    pattern: /$YAMLURL/inactiveusers
    handler: FormHandler
    kwargs:
      logs:
        url: sqlite:///$GRAMEXDATA/up-tsu-desktop/logviewer.db
        query:
          select distinct [user.id] as user, strftime('%d-%m-%Y', time) as month from aggD
          where time > DATE('now','-60 day')
      users:
        url: $connection_str
        query: select lower(user) as user from user_details
      modify: up_tsu_desktop_app.merge_inactive_users(data)

  up-tsu-desktop/district_data_download:
    pattern: /$YAMLURL/district_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id, t2.district_name as district,
        t2.division_name as division, t2.map_id, t2.div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_monthly t1
        JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_data_download:
    pattern: /$YAMLURL/division_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id, t2.district_name as district,
        t2.division_name as division, t2.map_id, t2.div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_monthly t1
        JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_data_division(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_data_download:
    pattern: /$YAMLURL/block_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/block_scores.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id, t2.district_name AS district,
        CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_block_data_monthly t1
        LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_data_block(data, handler)
      auth: *AUTH
      default:
        _limit: 10000000

  up-tsu-desktop/district_quarter_data_download:
    pattern: /$YAMLURL/district_quarter_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id, t2.district_name as district,
        t2.division_name as division, t2.map_id, t2.div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_quaterly t1
        JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_quarter_data_download:
    pattern: /$YAMLURL/division_quarter_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id, t2.district_name as district,
        t2.division_name as division, t2.map_id, t2.div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_quaterly t1
        JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_data_division(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_quarter_data_download:
    pattern: /$YAMLURL/block_quarter_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/block_scores.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id, t2.district_name AS district,
        CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_block_data_quaterly t1
        LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_data_block(data, handler)
      auth: *AUTH
      default:
        _limit: 10000000

  up-tsu-desktop/district_year_data_download:
    pattern: /$YAMLURL/district_year_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str #  $YAMLPATH/data/district_scores_year.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator, t2.district_id,
        t2.district_name AS district, t2.division_name AS division, t2.map_id, t2.div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_yearly t1
        LEFT JOIN dim_phase1_district_data t2 ON
        t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_year_data_download:
    pattern: /$YAMLURL/division_year_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/district_scores.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id, t2.district_name as district,
        t2.division_name as division, t2.map_id, t2.div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_district_data_yearly t1
        JOIN dim_phase1_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_data_division(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_year_data_download:
    pattern: /$YAMLURL/block_year_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str # $YAMLPATH/data/block_scores.csv
      query:
        SELECT t1.composite_index, t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id, t2.district_name AS district,
        CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_phase1_block_data_yearly t1
        LEFT JOIN dim_phase1_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_data_block(data, handler)
      auth: *AUTH
      default:
        _limit: 10000000

  # district data
  up-tsu-desktop/district_niti_data:
    pattern: /$YAMLURL/district_niti_data
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores.csv
      prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      query:
        SELECT t1.perc_point, t2.indicator_name AS indicator, t2.district_id_num as district_id,
        t2.district_name as district, t2.division_name as division, t2.div_map_id, t2.map_id,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_niti_district_data_monthly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'

  up-tsu-desktop/district_niti_quarter_data:
    pattern: /$YAMLURL/district_niti_quarter_data
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores_quarter.csv
      query:
        SELECT t1.perc_point, t2.indicator_name AS indicator, t2.district_id_num as district_id,
        t2.district_name AS district, t2.division_name AS division, t2.div_map_id, t2.map_id,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_niti_district_data_quaterly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.year = {year} AND t1.quarter = {quarter}

  up-tsu-desktop/district_niti_year_data:
    pattern: /$YAMLURL/district_niti_year_data
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores_year.csv
      query:
        SELECT t1.perc_point, t2.indicator_name AS indicator, t2.district_id_num as district_id,
        t2.district_name AS district, t2.division_name AS division, t2.div_map_id, t2.map_id,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_niti_district_data_yearly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.year = {year}

  # block data
  up-tsu-desktop/block_niti_data:
    pattern: /$YAMLURL/block_niti_data
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data_niti/block_niti_scores.csv
      prepare: up_tsu_desktop_app.max_date_args_district(args, handler)
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id_num as district_id, t2.district_name AS district,
        CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_niti_block_data_monthly t1
        LEFT JOIN dim_niti_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t2.indicator_id = t1.indicator_id
        WHERE t1.date = '{date}'

  up-tsu-desktop/block_niti_quarter_data:
    pattern: /$YAMLURL/block_niti_quarter_data
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data_niti/block_niti_scores_quarter.csv
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id_num as district_id, t2.district_name AS district,
        CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_niti_block_data_quaterly t1
        LEFT JOIN dim_niti_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t2.indicator_id = t1.indicator_id
        WHERE t1.year = {year} AND t1.quarter = {quarter}

  up-tsu-desktop/block_niti_year_data:
    pattern: /$YAMLURL/block_niti_year_data
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/block_niti_scores_year.csv
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.district_id_num as district_id, t2.district_name AS district,
        CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_niti_block_data_yearly t1
        LEFT JOIN dim_niti_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t2.indicator_id = t1.indicator_id
        WHERE t1.year = {year}

  # niti_area
  up-tsu-desktop/district_niti_data_area:
    pattern: /$YAMLURL/district_niti_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query:
        SELECT t1.perc_point, t2.indicator_name AS indicator, t2.district_id_num as district_id,
        t2.district_name as district, t2.division_name as division, t2.div_map_id as div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_niti_district_data_monthly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'

  up-tsu-desktop/district_niti_quarter_data_area:
    pattern: /$YAMLURL/district_niti_quarter_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores_quarter.csv
      query:
        SELECT t1.perc_point, t2.indicator_name AS indicator, t2.district_id_num as district_id,
        t2.district_name AS district, t2.division_name AS division, t2.div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_niti_district_data_quaterly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
        # WHERE t1.year = {year} AND t1.quarter = {quarter}

  up-tsu-desktop/district_niti_year_data_area:
    pattern: /$YAMLURL/district_niti_year_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores_year.csv
      query:
        SELECT t1.perc_point, t2.indicator_name AS indicator, t2.district_id_num as district_id,
        t2.district_name AS district, t2.division_name AS division, t2.div_map_id,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date,
        t2.domain_name as domain, t2.type_name as type
        FROM fact_niti_district_data_yearly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'

  up-tsu-desktop/block_niti_data_area:
    pattern: /$YAMLURL/block_niti_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data_niti/block_niti_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args(args, handler)
      # query: SELECT t1.perc_point, t2.indicator_name AS indicator,
      #         t2.district_id_num as district_id, t2.district_name AS district,
      #         CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
      #         DATE_FORMAT(t1.date, '%Y-%m-%d') AS date,
      #         t2.domain_name as domain, t2.type_name as type
      #         FROM fact_niti_block_data_monthly t1
      #         LEFT JOIN dim_niti_block_data t2 ON t2.block_id_num = t1.block_id_num
      #         AND t2.indicator_id = t1.indicator_id
      #         WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
      #         AND t2.indicator_name = '{indicator}'
      queryfunction: up_tsu_desktop_app.block_area_data_niti(args)
      # default:
      #     indicator : t2.indicator_name

  up-tsu-desktop/block_niti_quarter_data_area:
    pattern: /$YAMLURL/block_niti_quarter_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data_niti/block_niti_scores_quarter.csv
      # query: SELECT t1.perc_point, t2.indicator_name AS indicator,
      #         t2.district_id_num as district_id, t2.district_name AS district,
      #         CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
      #         t2.domain_name as domain, t2.type_name as type,
      #         DATE_FORMAT(t1.date, '%Y-%m-%d') AS date,
      #         FROM fact_niti_block_data_quaterly t1
      #         LEFT JOIN dim_niti_block_data t2 ON t2.block_id_num = t1.block_id_num
      #         AND t2.indicator_id = t1.indicator_id
      #         WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
      #         AND t2.indicator_name = {indicator}
      queryfunction: up_tsu_desktop_app.block_area_data_niti_quarterly(args)
      # default:
      #     indicator : t2.indicator_name

  up-tsu-desktop/block_niti_year_data_area:
    pattern: /$YAMLURL/block_niti_year_data_area
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/block_niti_scores_year.csv
      # query: SELECT t1.perc_point, t2.indicator_name AS indicator,
      #         t2.district_id_num as district_id, t2.district_name AS district,
      #         CONCAT('blc_', t2.block_id_num) as block_id, t2.block_name AS block,
      #         DATE_FORMAT(t1.date, '%Y-%m-%d') AS date,
      #         t2.domain_name as domain, t2.type_name as type
      #         FROM fact_niti_block_data_yearly t1
      #         LEFT JOIN dim_niti_block_data t2 ON t2.block_id_num = t1.block_id_num
      #         AND t2.indicator_id = t1.indicator_id
      #         WHERE t1.date BETWEEN '{date>~}' AND '{date<~}'
      #         AND t2.indicator_name = {indicator}
      queryfunction: up_tsu_desktop_app.block_area_data_niti_yearly(args)
      # default:
      #     indicator : t2.indicator_name

  # niti download
  up-tsu-desktop/district_niti_data_download:
    pattern: /$YAMLURL/district_niti_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.district_name as district, DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_niti_district_data_monthly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_niti_data_download:
    pattern: /$YAMLURL/division_niti_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores.csv
      # prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query:
        SELECT t1.perc_point as perc_point, t2.indicator_name AS indicator,
        t2.division_name as division, DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_niti_district_data_monthly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
        # group by t2.division_id_num, t2.indicator_id, t1.date
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_niti_data_download:
    pattern: /$YAMLURL/block_niti_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data_niti/block_niti_scores.csv
      prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.block_name AS block,t2.district_name as district_name, DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_niti_block_data_monthly t1
        LEFT JOIN dim_niti_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t2.indicator_id = t1.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/district_niti_quarter_data_download:
    pattern: /$YAMLURL/district_niti_quarter_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores_quarter.csv
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.district_name AS district, DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_niti_district_data_quaterly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_niti_quarter_data_download:
    pattern: /$YAMLURL/division_niti_quarter_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores_quarter.csv
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.division_name as division, DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_niti_district_data_quaterly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_niti_quarter_data_download:
    pattern: /$YAMLURL/block_niti_quarter_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str ##$YAMLPATH/data_niti/block_niti_scores_quarter.csv
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.block_name AS block, DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_niti_block_data_quaterly t1
        LEFT JOIN dim_niti_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t2.indicator_id = t1.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/district_niti_year_data_download:
    pattern: /$YAMLURL/district_niti_year_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores_year.csv
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.district_name AS district, t2.division_name AS division,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_niti_district_data_yearly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_niti_year_data_download:
    pattern: /$YAMLURL/division_niti_year_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/district_niti_scores_year.csv
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.division_name as division, t2.division_name AS division,
        DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_niti_district_data_yearly t1
        LEFT JOIN dim_niti_district_data t2 ON t2.district_id_num = t1.district_id_num
        AND t1.indicator_id = t2.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_niti_year_data_download:
    pattern: /$YAMLURL/block_niti_year_data_download
    handler: FormHandler
    kwargs:
      url: $connection_str #$YAMLPATH/data_niti/block_niti_scores_year.csv
      query: SELECT t1.perc_point, t2.indicator_name AS indicator,
        t2.block_name AS block, DATE_FORMAT(t1.date, '%Y-%m-%d') AS date
        FROM fact_niti_block_data_yearly t1
        LEFT JOIN dim_niti_block_data t2 ON t2.block_id_num = t1.block_id_num
        AND t2.indicator_id = t1.indicator_id
        WHERE t1.date = '{date}'
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  # amethi data
  up-tsu-desktop/block_amethi_data:
    pattern: /$YAMLURL/block_amethi_data
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_amethi/block_amethi_scores.xlsx
      auth: *AUTH

  up-tsu-desktop/block_amethi_indicator:
    pattern: /$YAMLURL/get_unique_list_amethi
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT distinct indicator FROM amethi_data where date(date)='{_date}'"
      auth: *AUTH

  up-tsu-desktop/amethi_max_date:
    pattern: /$YAMLURL/amethi_max_date
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      query: "select date(max(date)) as date from amethi_data"

  up-tsu-desktop/district_amethi_line_chart:
    pattern: /$YAMLURL/district_amethi_line_chart
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT block_id,date(date) as date,avg(composite_index) as score,
        sum(weight) as weightage
        FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}'
        group by block_id,date"
      auth: *AUTH

  up-tsu-desktop/block_amethi_line_chart:
    pattern: /$YAMLURL/block_amethi_line_chart
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query:
        "SELECT block_id,indicator,date(date) as date,avg(perc_point) as score
        FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}'
        and indicator =:indicator
        group by block_id,date,indicator"
      auth: *AUTH

  up-tsu-desktop/district_amethi_agg_line_chart:
    pattern: /$YAMLURL/district_amethi_agg_line_chart
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT district_id,date,avg(amethi_aggregate_score) as score
        FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}'
        group by district_id,date"
      auth: *AUTH

  up-tsu-desktop/district_amethi_per_line_chart:
    pattern: /$YAMLURL/district_amethi_per_line_chart
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query:
        "SELECT district_id,date(date) as date,avg(perc_point) as score FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}' and indicator=:indicator
        group by district_id,date"
      auth: *AUTH

  up-tsu-desktop/district_aggregate_score:
    pattern: /$YAMLURL/district_aggregate_score
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query:
        "SELECT block_id,block,date(date) as date,avg(composite_index) as monthly_score,
        sum(weight) as weightage, district,composite_rank,
        avg(amethi_aggregate_score) as amethi_aggregate_score
        FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}'
        group by block_id,date"
      auth: *AUTH

  up-tsu-desktop/district_per_score:
    pattern: /$YAMLURL/district_per_score
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT block_id,district,district_id,block,date(date) as date,
        composite_rank,perc_point as monthly_score,indicator_rank
        FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}'
        and indicator=:indicator"
      auth: *AUTH

  up-tsu-desktop/district_indicator_score:
    pattern: /$YAMLURL/district_indicator_score
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT indicator,date(date) as date,dist_aggr,best_in_dist,
        Weight,calc_type,type,domain,avg(amethi_dist_score) as amethi_dist_score,
        avg(amethi_aggregate_score) as amethi_aggregate_score
        FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}'
        group by indicator,date"
      auth: *AUTH

  up-tsu-desktop/block_indicator_score:
    pattern: /$YAMLURL/block_indicator_score
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT block,indicator,date(date) as date,dist_aggr,best_in_dist,
        Weight,calc_type,type,domain,
        perc_point,indicator_index,indicator_rank,amethi_aggregate_score
        FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}' and block =:block
        group by indicator,date"
      auth: *AUTH

  up-tsu-desktop/min_max_rank:
    pattern: /$YAMLURL/min_max_rank
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT indicator,max(indicator_rank) as indicator_rank_max,
        min(indicator_rank) as indicator_rank_min,date(date) as date
        FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}'
        group by date,indicator"
      auth: *AUTH

  up-tsu-desktop/block_amethi_data_download:
    pattern: /$YAMLURL/block_amethi_data_download
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      query: "SELECT block,block_id,indicator,perc_point,date(date) as date
        FROM amethi_data where date(date) = '{date}'"
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  # CMO data
  up-tsu-desktop/block_cmo_data:
    pattern: /$YAMLURL/block_cmo_data
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/block_cmo_scores.csv

  up-tsu-desktop/block_cmo_quarter_data:
    pattern: /$YAMLURL/block_cmo_quarter_data
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/block_cmo_scores_quarter.csv

  up-tsu-desktop/block_cmo_year_data:
    pattern: /$YAMLURL/block_cmo_year_data
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/block_cmo_scores_year.csv

  up-tsu-desktop/district_cmo_data:
    pattern: /$YAMLURL/district_cmo_data
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/district_cmo_scores.csv

  up-tsu-desktop/district_cmo_quarter_data:
    pattern: /$YAMLURL/district_cmo_quarter_data
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/district_cmo_scores_quarter.csv

  up-tsu-desktop/district_cmo_year_data:
    pattern: /$YAMLURL/district_cmo_year_data
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/district_cmo_scores_year.csv

  up-tsu-desktop/district_cmo_data_download:
    pattern: /$YAMLURL/district_cmo_data_download
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/district_cmo_scores.csv
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_cmo_data_download:
    pattern: /$YAMLURL/division_cmo_data_download
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/district_cmo_scores.csv
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_cmo_data_download:
    pattern: /$YAMLURL/block_cmo_data_download
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/block_cmo_scores.csv
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/district_cmo_quarter_data_download:
    pattern: /$YAMLURL/district_cmo_quarter_data_download
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/district_cmo_scores_quarter.csv
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_cmo_quarter_data_download:
    pattern: /$YAMLURL/division_cmo_quarter_data_download
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/district_cmo_scores_quarter.csv
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_cmo_quarter_data_download:
    pattern: /$YAMLURL/block_cmo_quarter_data_download
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/block_cmo_scores_quarter.csv
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/district_cmo_year_data_download:
    pattern: /$YAMLURL/district_cmo_year_data_download
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/district_cmo_scores_year.csv
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_cmo_year_data_download:
    pattern: /$YAMLURL/division_cmo_year_data_download
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/district_cmo_scores_year.csv
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_cmo_year_data_download:
    pattern: /$YAMLURL/block_cmo_year_data_download
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data_cmo/block_cmo_scores_year.csv
      modify: up_tsu_desktop_app.download_niti_data(data, handler)
      auth: *AUTH

  cmo_new-home:
    pattern: /$YAMLURL/cmo_new
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/index_cmo.html
      # See https://learn.gramener.com/guide/auth/#authorization for auth rules
      template: true
      auth: *AUTH
      headers:
        *FILEHEADER
        # Templates may have user-specific content. Cache privately.
        # Keep max-age small (in case we log out & log in as another user.)

  # com-design
  get_cmo_district_data_monthly:
    pattern: /$YAMLURL/get_cmo_district_data_monthly
    handler: FormHandler
    kwargs:
      url: $connection_str
      prepare: up_tsu_desktop_app.max_date_args(args, handler)
      queryfunction: up_tsu_desktop_app.district_query(args)
      default:
        division_id: t3.division_id_num
        district_id: t2.district_id_num
      modify: up_tsu_desktop_app.get_cmo_indicator_filter_data(data, handler)
      auth: *AUTH

  get_cmo_district_data_quaterly:
    pattern: /$YAMLURL/get_cmo_district_data_quaterly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query:
        select t1.district_id_num as id,district_name as name,indicator_name as ind_name,
        perc_point,t3.division_id_num as filter_id
        from fact_cmo_district_data_quaterly as t1
        left join dim_cmo_district_data as t2
        on t1.district_id_num=t2.district_id_num and t1.indicator_id=t2.indicator_id
        left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
        on t1.district_id_num=t3.district_id_num
        where t1.quarter={quarter} and t1.year={q_year} and t3.division_id_num = {division_id}
        and t2.district_id_num ={district_id}
      default:
        division_id: t3.division_id_num
        district_id: t2.district_id_num
        quarter: "4"
        q_year: "2019"
      modify: up_tsu_desktop_app.get_cmo_indicator_filter_data(data, handler)
      auth: *AUTH

  get_cmo_district_data_yearly:
    pattern: /$YAMLURL/get_cmo_district_data_yearly
    handler: FormHandler
    kwargs:
      url: $connection_str
      # query: select t1.district_id_num as id,district_name as name,indicator_name as ind_name,
      #         perc_point,t3.division_id_num as filter_id, t1.indicator_id, t2.weight
      #         from fact_cmo_district_score_yearly as t1
      #         left join dim_cmo_district_data as t2
      #         on t1.district_id_num=t2.district_id_num and t1.indicator_id=t2.indicator_id
      #         left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
      #         on t1.district_id_num=t3.district_id_num
      #         where t1.year='{year}' and t3.division_id_num = {division_id}
      #         and t2.district_id_num ={district_id}
      query: select t1.district_id_num as id, t1.district_name as name,
        t1.indicator_name as ind_name, t2.perc_point, t1.indicator_id, t1.weight
        from dim_cmo_district_data as t1
        left join fact_cmo_district_score_yearly t2
        on t1.district_id_num = t2.district_id_num and t1.indicator_id = t2.indicator_id
        and t2.year='{year}' and t1.district_id_num = {district_id}
      default:
        division_id: t3.division_id_num
        district_id: t2.district_id_num
        year: "2019"
      modify: up_tsu_desktop_app.get_cmo_indicator_filter_data(data, handler)
      auth: *AUTH

  get_district_indicator_id:
    pattern: /$YAMLURL/get_district_indicator_id
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select indicator_name as ind_name, indicator_id as ind_id, category
        from dim_cmo_district_data
        group by indicator_name, indicator_id, category
      auth: *AUTH

  get_cmo_sub_district_data_monthly:
    pattern: /$YAMLURL/get_cmo_sub_district_data_monthly
    handler: FormHandler
    kwargs:
      url: $connection_str
      prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query:
        select t2.district_id_num as id,t2.indicator_id as ind_id,t1.sub_indicator_name as sub_name,
        value,t3.division_id_num as filter_id
        from dim_cmo_sub_indicator_district as t1
        left join  fact_cmo_sub_indicator_district as t2
        on t1.sub_indicator_id=t2.sub_indicator_id
        left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
        on t2.district_id_num=t3.district_id_num
        where t2.date='{date}' and t2.district_id_num ={district_id}
      default:
        district_id: t2.district_id_num
      modify: up_tsu_desktop_app.get_cmo_sub_indicator_filter_data(data, handler)
      auth: *AUTH

  get_cmo_sub_district_data_quaterly:
    pattern: /$YAMLURL/get_cmo_sub_district_data_quaterly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select t2.district_id_num as id,t2.indicator_id as ind_id,
        t1.sub_indicator_name as sub_name,
        sum(value) as value,t3.division_id_num as filter_id
        from dim_cmo_sub_indicator_district as t1
        left join  fact_cmo_sub_indicator_district as t2
        on t1.sub_indicator_id=t2.sub_indicator_id
        left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
        on t2.district_id_num=t3.district_id_num
        where t2.date >='{start_date}' and t2.date <= '{end_date}' and t3.division_id_num = {division_id}
        and t2.district_id_num ={district_id}
        group by t2.district_id_num,t2.indicator_id,t1.sub_indicator_name,
        t3.division_id_num
      default:
        division_id: t3.division_id_num
        district_id: t2.district_id_num
        start_date: "2020-01-01"
        end_date: "2020-03-01"
      modify: up_tsu_desktop_app.get_cmo_sub_indicator_filter_data(data, handler)
      auth: *AUTH

  get_cmo_sub_district_data_yearly:
    pattern: /$YAMLURL/get_cmo_sub_district_data_yearly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select t2.district_id_num as id,t2.indicator_id as ind_id,
        t1.sub_indicator_name as sub_name,
        sum(value) as value,t3.division_id_num as filter_id
        from dim_cmo_sub_indicator_district as t1
        left join  fact_cmo_sub_indicator_district as t2
        on t1.sub_indicator_id=t2.sub_indicator_id
        left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
        on t2.district_id_num=t3.district_id_num
        where t2.date >='{start_year}' and t2.date <= '{end_year}' and t3.division_id_num = {division_id}
        and t2.district_id_num ={district_id}
        group by t2.district_id_num,t2.indicator_id,t1.sub_indicator_name,t3.division_id_num
      default:
        start_year: "2019-04-01"
        end_year: "2020-03-01"
        division_id: t3.division_id_num
        district_id: t2.district_id_num
      modify: up_tsu_desktop_app.get_cmo_sub_indicator_filter_data(data, handler)
      auth: *AUTH

  get_cmo_block_data_monthly:
    pattern: /$YAMLURL/get_cmo_block_data_monthly
    handler: FormHandler
    kwargs:
      url: $connection_str
      prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query:
        select t1.block_id_num as id,block_name as name,indicator_name as ind_name,perc_point,
        t3.district_id_num as filter_id
        from fact_cmo_block_data_monthly as t1
        left join dim_cmo_block_data as t2
        on t1.block_id_num=t2.block_id_num and t1.indicator_id=t2.indicator_id
        left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
        on t1.block_id_num=t3.block_id_num
        where t1.date='{date}' and t3.district_id_num = {district_id}
        and t3.block_id_num={block_id}
      default:
        district_id: t3.district_id_num
        block_id: t3.block_id_num
      modify: up_tsu_desktop_app.get_cmo_indicator_filter_data(data, handler)
      auth: *AUTH

  get_cmo_block_data_quaterly:
    pattern: /$YAMLURL/get_cmo_block_data_quaterly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query:
        select t1.block_id_num as id,block_name as name,indicator_name as ind_name,perc_point,
        t3.district_id_num as filter_id
        from fact_cmo_block_data_quaterly as t1
        left join dim_cmo_block_data as t2
        on t1.block_id_num=t2.block_id_num and t1.indicator_id=t2.indicator_id
        left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
        on t1.block_id_num=t3.block_id_num
        where t1.quarter={quarter} and t1.year={q_year} and t3.district_id_num = {district_id}
        and t3.block_id_num={block_id}
      default:
        district_id: t3.district_id_num
        block_id: t3.block_id_num
        quarter: "4"
        q_year: "2019"
      modify: up_tsu_desktop_app.get_cmo_indicator_filter_data(data, handler)
      auth: *AUTH

  get_cmo_block_data_yearly:
    pattern: /$YAMLURL/get_cmo_block_data_yearly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query:
        select t1.block_id_num as id,block_name as name,indicator_name as ind_name,perc_point,
        t3.district_id_num as filter_id
        from fact_cmo_block_score_yearly as t1
        left join dim_cmo_block_data as t2
        on t1.block_id_num=t2.block_id_num and t1.indicator_id=t2.indicator_id
        left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
        on t1.block_id_num=t3.block_id_num
        where t1.year='{year}' and t3.district_id_num = {district_id}
        and t3.block_id_num={block_id}
      default:
        district_id: t3.district_id_num
        block_id: t3.block_id_num
        year: "2019"
      modify: up_tsu_desktop_app.get_cmo_indicator_filter_data(data, handler)
      auth: *AUTH

  get_block_indicator_id:
    pattern: /$YAMLURL/get_block_indicator_id
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select indicator_name as ind_name,indicator_id as ind_id
        from dim_cmo_block_data
        group by indicator_name,indicator_id,ind_name
      auth: *AUTH

  get_maximum_date:
    pattern: /$YAMLURL/get_maximum_date
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select max(date) as date from fact_cmo_district_data_monthly
      auth: *AUTH

  get_maximum_date_district:
    pattern: /$YAMLURL/get_maximum_date_district
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select max(date) as date from fact_phase1_district_data_monthly
      auth: *AUTH

  get_maximum_date_district_niti:
    pattern: /$YAMLURL/get_niti_maximum_date_district
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: select max(date) as date from fact_niti_district_data_monthly
      auth: *AUTH

  get_maximum_date_amethi:
    pattern: /$YAMLURL/get_maximum_date_amethi
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: select max(date) as date from amethi_data
      auth: *AUTH

  get_cmo_sub_block_data_monthly:
    pattern: /$YAMLURL/get_cmo_sub_block_data_monthly
    handler: FormHandler
    kwargs:
      url: $connection_str
      prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query:
        select t2.block_id_num as id,t2.indicator_id as ind_id,t1.sub_indicator_name as sub_name,
        sum(value) as value,t3.district_id_num as filter_id
        from dim_cmo_sub_indicator_block as t1
        left join  fact_cmo_sub_indicator_block as t2
        on t1.sub_indicator_id=t2.sub_indicator_id
        left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
        on t2.block_id_num=t3.block_id_num
        where t2.date='{date}'and t3.district_id_num = {district_id}
        and t3.block_id_num={block_id}
        group by t2.block_id_num,t2.indicator_id,t1.sub_indicator_name,t3.district_id_num
      default:
        district_id: t3.district_id_num
        block_id: t3.block_id_num
      modify: up_tsu_desktop_app.get_cmo_sub_indicator_filter_data(data, handler)
      auth: *AUTH

  get_cmo_sub_block_data_quaterly:
    pattern: /$YAMLURL/get_cmo_sub_block_data_quaterly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query:
        select t2.block_id_num as id,t2.indicator_id as ind_id,t1.sub_indicator_name as sub_name,
        sum(value) as value,t3.district_id_num as filter_id
        from dim_cmo_sub_indicator_block as t1
        left join  fact_cmo_sub_indicator_block as t2
        on t1.sub_indicator_id=t2.sub_indicator_id
        left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
        on t2.block_id_num=t3.block_id_num
        where t2.date >='{start_date}' and t2.date <= '{end_date}' and t3.district_id_num = {district_id}
        and t3.block_id_num={block_id}
        group by t2.block_id_num,t2.indicator_id,t1.sub_indicator_name,t3.district_id_num
      default:
        district_id: t3.district_id_num
        block_id: t3.block_id_num
        start_date: "2020-01-01"
        end_date: "2020-03-01"
      modify: up_tsu_desktop_app.get_cmo_sub_indicator_filter_data(data, handler)
      auth: *AUTH

  get_cmo_sub_block_data_yearly:
    pattern: /$YAMLURL/get_cmo_sub_block_data_yearly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query:
        select t2.block_id_num as id,t2.indicator_id as ind_id,t1.sub_indicator_name as sub_name,
        sum(value) as value,t3.district_id_num as filter_id
        from dim_cmo_sub_indicator_block as t1
        left join  fact_cmo_sub_indicator_block as t2
        on t1.sub_indicator_id=t2.sub_indicator_id
        left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
        on t2.block_id_num=t3.block_id_num
        where t2.date >='{start_year}' and t2.date <= '{end_year}' and t3.district_id_num = {district_id}
        and t3.block_id_num={block_id}
        group by t2.block_id_num,t2.indicator_id,t1.sub_indicator_name,t3.district_id_num
      default:
        start_year: "2019-04-01"
        end_year: "2020-03-01"
        district_id: t3.district_id_num
        block_id: t3.block_id_num
      modify: up_tsu_desktop_app.get_cmo_sub_indicator_filter_data(data, handler)
      auth: *AUTH

  get_cmo_division_data_monthly:
    pattern: /$YAMLURL/get_cmo_division_data_monthly
    handler: FormHandler
    kwargs:
      url: $connection_str
      prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query: SELECT distinct t2.division_id_num as id,t2.division_name as name,
        t2.indicator_name as ind_name,avg(t1.perc_point) as perc_point
        FROM fact_cmo_district_data_monthly as t1
        left join dim_cmo_district_data as t2
        on t1.district_id_num = t2.district_id_num and t1.indicator_id = t2.indicator_id
        where t1.date='{date}' and t2.division_id_num = {division_id}
        group by t2.division_id_num,t2.indicator_name,t2.division_name
      default:
        division_id: t2.division_id_num
      modify: up_tsu_desktop_app.get_cmo_division_data(data, handler)
      auth: *AUTH

  get_cmo_division_data_quaterly:
    pattern: /$YAMLURL/get_cmo_division_data_quaterly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: SELECT distinct t2.division_id_num as id,t2.division_name as name,
        t2.indicator_name as ind_name,avg(t1.perc_point) as perc_point
        FROM fact_cmo_district_data_quaterly as t1
        left join dim_cmo_district_data as t2
        on t1.district_id_num = t2.district_id_num and t1.indicator_id = t2.indicator_id
        where t1.quarter={quarter} and t1.year={q_year} and t2.division_id_num = {division_id}
        group by t2.division_id_num,t2.division_name,t2.indicator_name
      default:
        quarter: "4"
        q_year: "2019"
        division_id: t2.division_id_num
      modify: up_tsu_desktop_app.get_cmo_division_data(data, handler)
      auth: *AUTH

  get_cmo_division_data_yearly:
    pattern: /$YAMLURL/get_cmo_division_data_yearly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: SELECT distinct t2.division_id_num as id,t2.division_name as name,
        t2.indicator_name as ind_name,avg(t1.perc_point) as perc_point
        FROM fact_cmo_district_score_yearly as t1
        left join dim_cmo_district_data as t2
        on t1.district_id_num = t2.district_id_num and t1.indicator_id = t2.indicator_id
        where  t1.year={year} and t2.division_id_num = {division_id}
        group by t2.division_id_num,t2.division_name,t2.indicator_name
      default:
        year: "2019"
        division_id: t2.division_id_num
      modify: up_tsu_desktop_app.get_cmo_division_data(data, handler)
      auth: *AUTH

  get_cmo_sub_division_data_monthly:
    pattern: /$YAMLURL/get_cmo_sub_division_data_monthly
    handler: FormHandler
    kwargs:
      url: $connection_str
      prepare: up_tsu_desktop_app.max_date_args(args, handler)
      query:
        select t3.division_name,t3.division_id_num as id,t2.indicator_id as ind_id,
        t1.sub_indicator_name as sub_name,sum(value) as value
        from dim_cmo_sub_indicator_district as t1
        left join  fact_cmo_sub_indicator_district as t2
        on t1.sub_indicator_id=t2.sub_indicator_id
        left join dim_cmo_district_data as t3
        on t2.district_id_num=t3.district_id_num and t2.indicator_id=t3.indicator_id
        where t2.date='{date}' and t3.division_id_num = {division_id}
        group by t3.division_name,t3.division_id_num,t2.indicator_id,t1.sub_indicator_name
      default:
        division_id: t3.division_id_num
      modify: up_tsu_desktop_app.get_cmo_sub_division_data(data, handler)
      auth: *AUTH

  get_cmo_sub_division_data_quaterly:
    pattern: /$YAMLURL/get_cmo_sub_division_data_quaterly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query:
        select t3.division_name,t3.division_id_num as id,t2.indicator_id as ind_id,
        t1.sub_indicator_name as sub_name,sum(value) as value
        from dim_cmo_sub_indicator_district as t1
        left join  fact_cmo_sub_indicator_district as t2
        on t1.sub_indicator_id=t2.sub_indicator_id
        left join dim_cmo_district_data as t3
        on t2.district_id_num=t3.district_id_num and t2.indicator_id=t3.indicator_id
        where t2.date >='{start_date}' and t2.date <= '{end_date}' and t3.division_id_num = {division_id}
        group by t3.division_name,t3.division_id_num,t2.indicator_id,t1.sub_indicator_name
      default:
        start_date: "2020-01-01"
        end_date: "2020-03-01"
        division_id: t3.division_id_num
      modify: up_tsu_desktop_app.get_cmo_sub_division_data(data, handler)
      auth: *AUTH

  get_cmo_sub_division_data_yearly:
    pattern: /$YAMLURL/get_cmo_sub_division_data_yearly
    handler: FormHandler
    kwargs:
      url: $connection_str
      query:
        select t3.division_name,t3.division_id_num as id,t2.indicator_id as ind_id,
        t1.sub_indicator_name as sub_name,sum(value) as value
        from dim_cmo_sub_indicator_district as t1
        left join fact_cmo_sub_indicator_district as t2
        on t1.sub_indicator_id=t2.sub_indicator_id
        left join  dim_cmo_district_data as t3
        on t2.district_id_num=t3.district_id_num and t2.indicator_id=t3.indicator_id
        where t2.date >='{start_year}' and t2.date <= '{end_year}' and t3.division_id_num = {division_id}
        group by t3.division_name,t3.division_id_num,t2.indicator_id,t1.sub_indicator_name
      default:
        start_year: "2019-04-01"
        end_year: "2020-03-01"
        division_id: t3.division_id_num
      modify: up_tsu_desktop_app.get_cmo_sub_division_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/search_div_dist_blck:
    pattern: /$YAMLURL/search_div_dist_blck
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data/search_keys.csv
      encoding: "unicode_escape"
      modify: up_tsu_desktop_app.get_search_div_dist_blck(data, handler)

  download_table_view_data:
    pattern: /$YAMLURL/download_table_view_data
    handler: FormHandler
    kwargs:
      url: $connection_string
      queryfunction: tb_ranking._queries(args, 'download_table_view_data')

  download_district_view_data:
    pattern: /$YAMLURL/download_district_view_data
    handler: FormHandler
    kwargs:
      url: $connection_string
      queryfunction: tb_ranking._queries(args, 'download_district_view_data')

  up-tsu-desktop/ou_id_mappings:
    pattern: /$YAMLURL/ou_id_mappings
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data/ou_id_mappings.csv
      function: up_tsu_desktop_app.ou_id_mappings(data, handler)
      auth: *AUTH

  up-tsu-desktop/amethi_mapview_indicator:
    pattern: /$YAMLURL/amethi_mapview_indicator
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT indicator,indicator_id,type,domain,
        (avg(dist_aggr) * 100) as perc_point,
        (amethi_dist_score/Weight) * 100 as weightage,
        avg(amethi_aggregate_score) as amethi_aggregate_score
        FROM amethi_data
        where date(date) = '{to_date}'
        group by indicator,date"
      auth: *AUTH

  up-tsu-desktop/sum_weightage:
    pattern: /$YAMLURL/sum_weightage
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT sum(Weight)* 100 as nomralize_val
        FROM amethi_data
        where date(date) = '{to_date}' and block='Amethi'
        group by block"
      auth: *AUTH

  up-tsu-desktop/amethi_mapview_indicator_block_level:
    pattern: /$YAMLURL/amethi_mapview_indicator_block_level
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT indicator,indicator_id,type,domain,
        (perc_point* 100) as perc_point,sum(Weight) as Weight,
        composite_index as amethi_aggregate_score,
        (indicator_index/Weight) * 100 as weightage,
        indicator_index
        FROM amethi_data
        where date(date) = '{to_date}' and map_id = '{block_level}'
        group by indicator,date"
      auth: *AUTH

  up-tsu-desktop/amethi_mapview_block_level:
    pattern: /$YAMLURL/amethi_mapview_block_level
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT block,composite_rank,date(date) as date,
        (avg(indicator_index)) as indicator_index,map_id,
        ((composite_index)/sum(Weight) * 100) as composite_index,
        avg(perc_point) as perc_point
        FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}'
        group by block,date"
      auth: *AUTH

  up-tsu-desktop/amethi_mapview_block_level_indicator:
    pattern: /$YAMLURL/amethi_mapview_block_level_indicator
    handler: FormHandler
    kwargs:
      url: sqlite:///$YAMLPATH/data_amethi/amethi_data.db
      table: amethi_data
      query: "SELECT block,composite_index,
        date(date) as date,(avg(indicator_index)) as indicator_index,map_id,
        sum(Weight) as curr_month_normalize,indicator_rank,
        perc_point
        FROM amethi_data
        where date(date) >= '{from_date}' and date(date)<='{to_date}'
        and indicator_id = '{indicator_id}'
        group by block,date"
      auth: *AUTH

  up-tsu-desktop/district_download_cmo_monthly:
    pattern: /$YAMLURL/district_download_cmo_monthly
    handler: FormHandler
    kwargs:
      main_data:
        url: $connection_str
        prepare: up_tsu_desktop_app.max_date_args(args, handler)
        # query: select t1.district_id_num as id,district_name as name,indicator_name as ind_name,
        #         perc_point,t3.division_id_num as filter_id
        #         from fact_cmo_district_data_monthly as t1
        #         left join dim_cmo_district_data as t2
        #         on t1.district_id_num=t2.district_id_num and t1.indicator_id=t2.indicator_id
        #         left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
        #         on t1.district_id_num=t3.district_id_num
        #         where t1.date='{date}' and t3.division_id_num = {division_id}
        #         and t2.district_id_num ={district_id}
        query: select t1.district_id_num as id, t1.district_name as name,
          t1.indicator_name as ind_name, t2.perc_point, t1.indicator_id, t1.weight
          from dim_cmo_district_data as t1
          left join fact_cmo_district_data_monthly t2
          on t1.district_id_num = t2.district_id_num and t1.indicator_id = t2.indicator_id
          and t2.date='{date}' and t1.district_id_num = {district_id}
      sub_data:
        url: $connection_str
        prepare: up_tsu_desktop_app.max_date_args(args, handler)
        # query: select t2.district_id_num as id,t2.indicator_id as ind_id,t1.sub_indicator_name as sub_name,
        #             value,t3.division_id_num as filter_id
        #             from dim_cmo_sub_indicator_district as t1
        #             left join  fact_cmo_sub_indicator_district as t2
        #             on t1.sub_indicator_id=t2.sub_indicator_id
        #             left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
        #             on t2.district_id_num=t3.district_id_num
        #             where t2.date='{date}' and t3.division_id_num = {division_id}
        #             and t2.district_id_num ={district_id}

        # query: select t2.district_id_num as id,t2.indicator_id as ind_id,t1.sub_indicator_name as sub_name,
        #             value,t3.division_id_num as filter_id
        #             from dim_cmo_sub_indicator_district as t1
        #             left join  fact_cmo_sub_indicator_district as t2
        #             on t1.sub_indicator_id=t2.sub_indicator_id
        #             left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
        #             on t2.district_id_num=t3.district_id_num
        #             where t2.date='{date}' and t2.district_id_num ={district_id}
        query: SELECT t2.district_id_num AS id, t2.indicator_id,
          t1.sub_indicator_name AS sub_name, value
          FROM dim_cmo_sub_indicator_district AS t1
          LEFT JOIN
          fact_cmo_sub_indicator_district AS t2 ON t1.sub_indicator_id = t2.sub_indicator_id
          AND t2.date = '{date}'
      default:
        division_id: t3.division_id_num
        district_id: t2.district_id_num
      modify: up_tsu_desktop_app.download_cmo_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_download_cmo_monthly:
    pattern: /$YAMLURL/block_download_cmo_monthly
    handler: FormHandler
    kwargs:
      main_data:
        url: $connection_str
        prepare: up_tsu_desktop_app.max_date_args(args, handler)
        query:
          select t1.block_id_num as id,block_name as name,indicator_name as ind_name,perc_point,
          t3.district_id_num as filter_id
          from fact_cmo_block_data_monthly as t1
          left join dim_cmo_block_data as t2
          on t1.block_id_num=t2.block_id_num and t1.indicator_id=t2.indicator_id
          left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
          on t1.block_id_num=t3.block_id_num
          where t1.date='{date}' and t3.district_id_num = {district_id}
          and t3.block_id_num={block_id}
      sub_data:
        url: $connection_str
        prepare: up_tsu_desktop_app.max_date_args(args, handler)
        query:
          select t2.block_id_num as id,t2.indicator_id as ind_id,t1.sub_indicator_name as sub_name,
          sum(value) as value,t3.district_id_num as filter_id
          from dim_cmo_sub_indicator_block as t1
          left join  fact_cmo_sub_indicator_block as t2
          on t1.sub_indicator_id=t2.sub_indicator_id
          left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
          on t2.block_id_num=t3.block_id_num
          where t2.date='{date}'and t3.district_id_num = {district_id}
          and t3.block_id_num={block_id}
          group by t2.block_id_num,t2.indicator_id,t1.sub_indicator_name,t3.district_id_num
      default:
        district_id: t3.district_id_num
        block_id: t3.block_id_num
      modify: up_tsu_desktop_app.download_cmo_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_download_cmo_monthly:
    pattern: /$YAMLURL/division_download_cmo_monthly
    handler: FormHandler
    kwargs:
      main_data:
        url: $connection_str
        prepare: up_tsu_desktop_app.max_date_args(args, handler)
        query:
          SELECT distinct t2.division_id_num as id,t2.division_name as name,
          t2.indicator_name as ind_name,avg(t1.perc_point) as perc_point
          FROM fact_cmo_district_data_monthly as t1
          left join dim_cmo_district_data as t2
          on t1.district_id_num = t2.district_id_num and t1.indicator_id = t2.indicator_id
          where t1.date='{date}' and t2.division_id_num = {division_id}
          group by t2.division_id_num,t2.indicator_name,t2.division_name
      sub_data:
        url: $connection_str
        prepare: up_tsu_desktop_app.max_date_args(args, handler)
        query:
          select t3.division_name,t3.division_id_num as id,t2.indicator_id as ind_id,
          t1.sub_indicator_name as sub_name,sum(value) as value
          from dim_cmo_sub_indicator_district as t1
          left join  fact_cmo_sub_indicator_district as t2
          on t1.sub_indicator_id=t2.sub_indicator_id
          left join dim_cmo_district_data as t3
          on t2.district_id_num=t3.district_id_num and t2.indicator_id=t3.indicator_id
          where t2.date='{date}' and t3.division_id_num = {division_ids}
          group by t3.division_name,t3.division_id_num,t2.indicator_id,t1.sub_indicator_name
      modify: up_tsu_desktop_app.download_cmo_data(data, handler)
      default:
        division_id: t2.division_id_num
        division_ids: t3.division_id_num
      auth: *AUTH

  up-tsu-desktop/district_download_cmo_quaterly:
    pattern: /$YAMLURL/district_download_cmo_quaterly
    handler: FormHandler
    kwargs:
      main_data:
        url: $connection_str
        query:
          select t1.district_id_num as id,district_name as name,indicator_name as ind_name,
          perc_point,t3.division_id_num as filter_id
          from fact_cmo_district_data_quaterly as t1
          left join dim_cmo_district_data as t2
          on t1.district_id_num=t2.district_id_num and t1.indicator_id=t2.indicator_id
          left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
          on t1.district_id_num=t3.district_id_num
          where t1.quarter={quarter} and t1.year={q_year} and t3.division_id_num = {division_id}
          and t2.district_id_num ={district_id}
      sub_data:
        url: $connection_str
        query: select t2.district_id_num as id,t2.indicator_id as ind_id,
          t1.sub_indicator_name as sub_name,
          sum(value) as value,t3.division_id_num as filter_id
          from dim_cmo_sub_indicator_district as t1
          left join  fact_cmo_sub_indicator_district as t2
          on t1.sub_indicator_id=t2.sub_indicator_id
          left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
          on t2.district_id_num=t3.district_id_num
          where t2.date >='{start_date}' and t2.date <= '{end_date}' and t3.division_id_num = {division_id}
          and t2.district_id_num ={district_id}
          group by t2.district_id_num,t2.indicator_id,t1.sub_indicator_name,
          t3.division_id_num
      default:
        division_id: t3.division_id_num
        district_id: t2.district_id_num
        quarter: "4"
        q_year: "2019"
        start_date: "2020-01-01"
        end_date: "2020-03-01"
      modify: up_tsu_desktop_app.download_cmo_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_download_cmo_quaterly:
    pattern: /$YAMLURL/block_download_cmo_quaterly
    handler: FormHandler
    kwargs:
      main_data:
        url: $connection_str
        query:
          select t1.block_id_num as id,block_name as name,indicator_name as ind_name,perc_point,
          t3.district_id_num as filter_id
          from fact_cmo_block_data_quaterly as t1
          left join dim_cmo_block_data as t2
          on t1.block_id_num=t2.block_id_num and t1.indicator_id=t2.indicator_id
          left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
          on t1.block_id_num=t3.block_id_num
          where t1.quarter={quarter} and t1.year={q_year} and t3.district_id_num = {district_id}
          and t3.block_id_num={block_id}
      sub_data:
        url: $connection_str
        query:
          select t2.block_id_num as id,t2.indicator_id as ind_id,t1.sub_indicator_name as sub_name,
          sum(value) as value,t3.district_id_num as filter_id
          from dim_cmo_sub_indicator_block as t1
          left join  fact_cmo_sub_indicator_block as t2
          on t1.sub_indicator_id=t2.sub_indicator_id
          left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
          on t2.block_id_num=t3.block_id_num
          where t2.date >='{start_date}' and t2.date <= '{end_date}' and t3.district_id_num = {district_id}
          and t3.block_id_num={block_id}
          group by t2.block_id_num,t2.indicator_id,t1.sub_indicator_name,t3.district_id_num
      default:
        district_id: t3.district_id_num
        block_id: t3.block_id_num
        start_date: "2020-01-01"
        end_date: "2020-03-01"
        quarter: "4"
        q_year: "2019"
      modify: up_tsu_desktop_app.download_cmo_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_download_cmo_quaterly:
    pattern: /$YAMLURL/division_download_cmo_quaterly
    handler: FormHandler
    kwargs:
      main_data:
        url: $connection_str
        query:
          SELECT distinct t2.division_id_num as id,t2.division_name as name,
          t2.indicator_name as ind_name,avg(t1.perc_point) as perc_point
          FROM fact_cmo_district_data_quaterly as t1
          left join dim_cmo_district_data as t2
          on t1.district_id_num = t2.district_id_num and t1.indicator_id = t2.indicator_id
          where t1.quarter={quarter} and t1.year={q_year} and t2.division_id_num = {division_id}
          group by t2.division_id_num,t2.division_name,t2.indicator_name
      sub_data:
        url: $connection_str
        query:
          select t3.division_name,t3.division_id_num as id,t2.indicator_id as ind_id,
          t1.sub_indicator_name as sub_name,sum(value) as value
          from dim_cmo_sub_indicator_district as t1
          left join  fact_cmo_sub_indicator_district as t2
          on t1.sub_indicator_id=t2.sub_indicator_id
          left join dim_cmo_district_data as t3
          on t2.district_id_num=t3.district_id_num and t2.indicator_id=t3.indicator_id
          where t2.date >='{start_date}' and t2.date <= '{end_date}' and t3.division_id_num = {division_ids}
          group by t3.division_name,t3.division_id_num,t2.indicator_id,t1.sub_indicator_name
      default:
        quarter: "4"
        q_year: "2019"
        division_id: t2.division_id_num
        start_date: "2020-01-01"
        end_date: "2020-03-01"
        division_ids: t3.division_id_num
      modify: up_tsu_desktop_app.download_cmo_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/district_download_cmo_yearly:
    pattern: /$YAMLURL/district_download_cmo_yearly
    handler: FormHandler
    kwargs:
      main_data:
        url: $connection_str
        # query: select t1.district_id_num as id,district_name as name,indicator_name as ind_name,
        #         perc_point,t3.division_id_num as filter_id
        #         from fact_cmo_district_score_yearly as t1
        #         left join dim_cmo_district_data as t2
        #         on t1.district_id_num=t2.district_id_num and t1.indicator_id=t2.indicator_id
        #         left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
        #         on t1.district_id_num=t3.district_id_num
        #         where t1.year='{year}' and t3.division_id_num = {division_id}
        #         and t2.district_id_num ={district_id}
        query: select t1.district_id_num as id, t1.district_name as name,
          t1.indicator_name as ind_name, t2.perc_point, t1.indicator_id, t1.weight
          from dim_cmo_district_data as t1
          left join fact_cmo_district_score_yearly t2
          on t1.district_id_num = t2.district_id_num and t1.indicator_id = t2.indicator_id
          and t2.year ='{year}' and t1.district_id_num = {district_id}
      sub_data:
        url: $connection_str
        # query: select t2.district_id_num as id,t2.indicator_id as ind_id,
        #       t1.sub_indicator_name as sub_name,
        #       sum(value) as value,t3.division_id_num as filter_id
        #       from dim_cmo_sub_indicator_district as t1
        #       left join  fact_cmo_sub_indicator_district as t2
        #       on t1.sub_indicator_id=t2.sub_indicator_id
        #       left join (select distinct division_id_num,district_id_num from ref_bl_di_div) as t3
        #       on t2.district_id_num=t3.district_id_num
        #       where t2.date >='{start_year}' and t2.date <= '{end_year}' and t3.division_id_num = {division_id}
        #       and t2.district_id_num ={district_id}
        #       group by t2.district_id_num,t2.indicator_id,t1.sub_indicator_name,t3.division_id_num
        query:
          SELECT t2.district_id_num AS id, t2.indicator_id AS ind_id, t1.sub_indicator_name AS sub_name,
          sum(value) as value FROM dim_cmo_sub_indicator_district AS t1
          LEFT JOIN fact_cmo_sub_indicator_district AS t2 ON t1.sub_indicator_id = t2.sub_indicator_id
          and t2.district_id_num = {district_id}
          and t2.date >= '{start_year}' and t2.date <= '{end_year}'
          group by t2.district_id_num,t2.indicator_id,t1.sub_indicator_name
      default:
        division_id: t3.division_id_num
        district_id: t2.district_id_num
        start_year: "2019-04-01"
        end_year: "2020-03-01"
        year: "2019"
      modify: up_tsu_desktop_app.download_cmo_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/block_download_cmo_yearly:
    pattern: /$YAMLURL/block_download_cmo_yearly
    handler: FormHandler
    kwargs:
      main_data:
        url: $connection_str
        query:
          select t1.block_id_num as id,block_name as name,indicator_name as ind_name,perc_point,
          t3.district_id_num as filter_id
          from fact_cmo_block_score_yearly as t1
          left join dim_cmo_block_data as t2
          on t1.block_id_num=t2.block_id_num and t1.indicator_id=t2.indicator_id
          left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
          on t1.block_id_num=t3.block_id_num
          where t1.year='{year}' and t3.district_id_num = {district_id}
          and t3.block_id_num={block_id}
      sub_data:
        url: $connection_str
        query:
          select t2.block_id_num as id,t2.indicator_id as ind_id,t1.sub_indicator_name as sub_name,
          sum(value) as value,t3.district_id_num as filter_id
          from dim_cmo_sub_indicator_block as t1
          left join  fact_cmo_sub_indicator_block as t2
          on t1.sub_indicator_id=t2.sub_indicator_id
          left join (select distinct block_id_num,district_id_num from ref_bl_di_div) as t3
          on t2.block_id_num=t3.block_id_num
          where t2.date >='{start_year}' and t2.date <= '{end_year}' and t3.district_id_num = {district_id}
          and t3.block_id_num={block_id}
          group by t2.block_id_num,t2.indicator_id,t1.sub_indicator_name,t3.district_id_num
      default:
        start_year: "2019-04-01"
        end_year: "2020-03-01"
        district_id: t3.district_id_num
        block_id: t3.block_id_num
        year: "2019"
      modify: up_tsu_desktop_app.download_cmo_data(data, handler)
      auth: *AUTH

  up-tsu-desktop/division_download_cmo_yearly:
    pattern: /$YAMLURL/division_download_cmo_yearly
    handler: FormHandler
    kwargs:
      main_data:
        url: $connection_str
        query:
          SELECT distinct t2.division_id_num as id,t2.division_name as name,
          t2.indicator_name as ind_name,avg(t1.perc_point) as perc_point
          FROM fact_cmo_district_score_yearly as t1
          left join dim_cmo_district_data as t2
          on t1.district_id_num = t2.district_id_num and t1.indicator_id = t2.indicator_id
          where  t1.year={year} and t2.division_id_num = {division_id}
          group by t2.division_id_num,t2.division_name,t2.indicator_name
      sub_data:
        url: $connection_str
        query:
          select t3.division_name,t3.division_id_num as id,t2.indicator_id as ind_id,
          t1.sub_indicator_name as sub_name,sum(value) as value
          from dim_cmo_sub_indicator_district as t1
          left join   fact_cmo_sub_indicator_district as t2
          on t1.sub_indicator_id=t2.sub_indicator_id
          left join  dim_cmo_district_data as t3
          on t2.district_id_num=t3.district_id_num and t2.indicator_id=t3.indicator_id
          where t2.date >='{start_year}' and t2.date <= '{end_year}' and t3.division_id_num = {division_ids}
          group by t3.division_name,t3.division_id_num,t2.indicator_id,t1.sub_indicator_name
      default:
        year: "2019"
        division_id: t2.division_id_num
        start_year: "2019-04-01"
        end_year: "2020-03-01"
        division_ids: t3.division_id_num
      modify: up_tsu_desktop_app.download_cmo_data(data, handler)
      auth: *AUTH

  projectemail-districts:
    pattern: /$YAMLURL/find_districts
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: SELECT distinct(district_id_num), district_name from dim_phase1_district_data order by district_name;
      auth: *AUTH
      # auth:
      #   login_url: /$YAMLURL/login/

  projectemail-home:
    pattern: /$YAMLURL/comicgen
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/comic/index.html
      # See https://learn.gramener.com/guide/auth/#authorization for auth rules
      auth:
        login_url: /$YAMLURL/login
      template: true
      headers:
        # Templates may have user-specific content. Cache privately.
        # Keep max-age small (in case we log out & log in as another user.)
        Cache-Control: private, max-age=1
    cache: { expiry: { duration: 1 } }

  projectemail-capture:
    pattern: /$YAMLURL/comicgenpdf
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/comic/index_capture.html
      # See https://learn.gramener.com/guide/auth/#authorization for auth rules
      auth:
        login_url: /$YAMLURL/login
      template: true
      headers:
        # Templates may have user-specific content. Cache privately.
        # Keep max-age small (in case we log out & log in as another user.)
        Cache-Control: private, max-age=1
    cache: { expiry: { duration: 1 } }

  projectemail-page1-data:
    pattern: /$YAMLURL/page1_data
    handler: FormHandler
    kwargs:
      rankdata_curr:
        url: $connection_str
        query:
          SELECT d.district_name,d.indicator_name,f.composite_index,f.composite_rank,f.date
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d on  f.indicator_id=d.indicator_id and
          f.district_id_num = d.district_id_num
          where (f.date='{start_date}') and f.district_id_num={district_id_num} limit 1;
        default:
          district_id_num: "12"
          start_date: "2020-09-01"
      rankdata_prev:
        url: $connection_str
        query:
          SELECT d.district_name,d.indicator_name,f.composite_index,f.composite_rank,f.date
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d on  f.indicator_id=d.indicator_id and
          f.district_id_num = d.district_id_num
          where (f.date='{end_date}') and f.district_id_num={district_id_num} limit 1;
        default:
          district_id_num: "12"
          start_date: "2020-09-01"
          end_date: "2020-08-01"
      district_data:
        url: $connection_str
        query:
          SELECT d.district_name,d.indicator_name,f.composite_index,f.composite_rank,f.date FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d on  f.indicator_id=d.indicator_id and f.district_id_num = d.district_id_num
          where (f.date='{start_date}' or f.date='{end_date}') and f.district_id_num={district_id_num};
        default:
          district_id_num: "12"
          start_date: "2020-09-01"
          end_date: "2020-08-01"
      block_data:
        url: $connection_str
        query:
          SELECT distinct d.block_name,f.composite_index,f.composite_rank,f.date,d.map_id FROM fact_phase1_block_data_monthly as f
          left join dim_phase1_block_data as d on  f.indicator_id=d.indicator_id and f.block_id_num = d.block_id_num
          where (f.date='{start_date}') and d.district_id_num={district_id_num} order by composite_rank;
        default:
          district_id_num: "12"
          start_date: "2020-09-01"
          end_date: "2020-08-01"
      block_data_prev:
        url: $connection_str
        query:
          SELECT distinct d.block_name,f.composite_index,f.composite_rank,f.date FROM fact_phase1_block_data_monthly as f
          left join dim_phase1_block_data as d on  f.indicator_id=d.indicator_id and f.block_id_num = d.block_id_num
          where (f.date='{end_date}') and d.district_id_num={district_id_num} order by composite_rank;
        default:
          district_id_num: "12"
          start_date: "2020-09-01"
          end_date: "2020-08-01"
      districtname:
        url: $connection_str
        query: select district_name from dim_phase1_district_data where district_id_num={district_id_num} limit 1;
        default:
          district_id_num: "12"
      modify: projectemail.modify_page1(handler, data)
      auth: *AUTH

  up-tsu-desktop/latest-date:
    pattern: /$YAMLURL/latestdate
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: SELECT distinct date from fact_phase1_district_data_monthly order by date desc limit 1;
      auth: *AUTH
      # auth:
      #   login_url: /$YAMLURL/login/

  projectemail-page2-data-areachart:
    pattern: /$YAMLURL/page2_areachart
    handler: FormHandler
    kwargs:
      min_date_filter:
        url: $connection_str
        query: select min(date) as min_date from fact_phase1_district_data_monthly
      area_chart:
        prepare: projectemail.page2_area_chart_prepare(args)
        url: $connection_str
        query:
          SELECT d.district_name, d.indicator_name, f.indicator_rank,f.perc_point as value,d.indicator_id, date
          FROM fact_phase1_district_data_monthly as f left join dim_phase1_district_data
          as d on  f.indicator_id=d.indicator_id and f.district_id_num = d.district_id_num
          where d.indicator_id={indicator_id} and date <= '{start_date}' and date > '{end_date}' order by date;
        default:
          district_id_num: "12"
          start_date: "2020-10-01"
        modify: projectemail.modify_page2_chart(handler, data)
        auth: *AUTH

  projectemail-page2-data:
    pattern: /$YAMLURL/page2_data
    handler: FormHandler
    kwargs:
      districtname:
        url: $connection_str
        query: select district_name from dim_phase1_district_data where district_id_num={district_id_num} limit 1;
        default:
          district_id_num: "12"
      indicator_count:
        url: $connection_str
        query: select count(distinct d.indicator_name) as indicator_count from dim_phase1_district_data d;
      indicator_type:
        url: $connection_str
        query: select indicator_name, calc_type from dim_phase1_district_data;
      up_avg:
        url: $connection_str
        query:
          SELECT d.indicator_id,d.indicator_name,avg(f.perc_point) as up_avg,date
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d on  f.indicator_id=d.indicator_id
          and f.district_id_num = d.district_id_num where (f.date='{start_date}')
          group by d.indicator_id,d.indicator_name order by indicator_name;
        default:
          district_id_num: "12"
          start_date: "2020-09-01"
      district_avg:
        url: $connection_str
        query:
          SELECT d.district_name,d.indicator_name,f.perc_point as month_wise,d.indicator_id
          FROM fact_phase1_district_data_monthly as f left join dim_phase1_district_data
          as d on  f.indicator_id=d.indicator_id and f.district_id_num = d.district_id_num
          where (f.date='{start_date}') and f.district_id_num = {district_id_num} order by indicator_name;
        default:
          district_id_num: "12"
          start_date: "2020-09-01"
      best_performing_district:
        url: $connection_str
        query:
          SELECT d.district_name,d.indicator_name, f.perc_point as month_wise,d.indicator_id
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d on  f.indicator_id=d.indicator_id
          and f.district_id_num = d.district_id_num
          where (f.date='{start_date}') order by indicator_name asc,  f.perc_point desc,
          district_name asc;
        default:
          start_date: "2020-09-01"
      modify: projectemail.modify_page2(handler, data)
      auth: *AUTH

  up-tsu-mapview/dumbbell:
    pattern: /$YAMLURL/dumbbell
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/assets/data/dumbbell.csv
    # cache: true

  projectemail-page3-data-dumbellchart:
    pattern: /$YAMLURL/page3_dumbellchart
    handler: FormHandler
    kwargs:
      current_year:
        url: $connection_str
        query:
          SELECT d.block_name as block_name, d.indicator_name, avg(f.perc_point) as score, date
          FROM fact_phase1_block_data_monthly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and
          d.block_id_num =f.block_id_num
          where d.district_id_num = {district_id_num} and date = '{start_date}'
          group by block_name,date,indicator_name
          order by date desc;
        default:
          district_id_num: "12"
          start_date: "2020-10-01"
      previous_year:
        prepare: projectemail.modify_dates_for_page3_end_date(args)
        url: $connection_str
        query:
          SELECT d.block_name as block_name, d.indicator_name, avg(f.perc_point) as score, date
          FROM fact_phase1_block_data_monthly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and
          d.block_id_num =f.block_id_num
          where d.district_id_num = {district_id_num} and date = '{end_date}'
          group by block_name,date,indicator_name
          order by date desc;
        default:
          district_id_num: "12"
          end_date: "2019-10-01"
      district_current_year:
        url: $connection_str
        query: SELECT d.indicator_name,avg(f.perc_point) as up_avg, date
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d on  f.indicator_id=d.indicator_id
          and f.district_id_num = d.district_id_num where d.district_id_num = {district_id_num}
          and date = '{start_date}'
          group by indicator_name order by indicator_name;
        default:
          district_id_num: "12"
          start_date: "2020-10-01"
      district_previous_year:
        prepare: projectemail.modify_dates_for_page3_end_date(args)
        url: $connection_str
        query: SELECT d.indicator_name,avg(f.perc_point) as up_avg, date
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d on  f.indicator_id=d.indicator_id
          and f.district_id_num = d.district_id_num where d.district_id_num = {district_id_num}
          and date = '{end_date}'
          group by indicator_name order by indicator_name;
        default:
          district_id_num: "12"
          end_date: "2019-10-01"
      modify: projectemail.modify_page3_chart(handler, data)
      auth: *AUTH

  projectemail-page3-data:
    pattern: /$YAMLURL/page3_data
    handler: FormHandler
    kwargs:
      block_count:
        url: $connection_str
        query: SELECT count(distinct block_id_num) as total_blocks from dim_phase1_block_data where district_id_num={district_id_num};
        default:
          district_id_num: "12"
      up_avg_curr_month:
        url: $connection_str
        query:
          SELECT d.indicator_id,d.indicator_name,avg(f.perc_point) as up_avg,date
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d on  f.indicator_id=d.indicator_id
          and f.district_id_num = d.district_id_num where (f.date='{start_date}')
          group by d.indicator_id,d.indicator_name order by indicator_name;
        default:
          district_id_num: "12"
          start_date: "2020-09-01"
      up_avg_prev_month:
        url: $connection_str
        query:
          SELECT d.indicator_id,d.indicator_name,avg(f.perc_point) as up_avg,date
          FROM fact_phase1_district_data_monthly as f
          left join dim_phase1_district_data as d on  f.indicator_id=d.indicator_id
          and f.district_id_num = d.district_id_num where (f.date='{end_date}')
          group by d.indicator_id,d.indicator_name order by indicator_name;
        default:
          district_id_num: "12"
          end_date: "2020-08-01"
      district_avg:
        url: $connection_str
        query:
          SELECT d.district_name,d.indicator_name,f.perc_point as month_wise,d.indicator_id, f.date
          FROM fact_phase1_district_data_monthly as f left join dim_phase1_district_data
          as d on  f.indicator_id=d.indicator_id and f.district_id_num = d.district_id_num
          where (f.date='{start_date}' or f.date='{end_date}') and f.district_id_num = {district_id_num} order by indicator_name;;
        default:
          district_id_num: "12"
          start_date: "2020-09-01"
          end_date: "2020-08-01"
      block_score:
        url: $connection_str
        query: SELECT d.block_name as block,avg(f.perc_point) as score, date,
          d.block_id_num as blk_id,
          avg(indicator_index) as indicator_index
          FROM fact_phase1_block_data_monthly as f
          left join dim_phase1_block_data as d
          on d.indicator_id = f.indicator_id and
          d.block_id_num =f.block_id_num
          where d.district_id_num = {district_id_num}
          group by block,date,blk_id
          order by date desc;
        default:
          district_id_num: "12"
      modify: projectemail.modify_page3(handler, data)
      auth: *AUTH

  up-tsu-desktop/log-analysis:
    pattern: /$YAMLURL/log_analysis
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/log_analysis.html
      auth:
        login_url: /$YAMLURL/login
        membership:
          designation: [Admin]
      template: true

  up-tsu-desktop/log-analysis-data:
    pattern: /$YAMLURL/log_analysis_data
    handler: FormHandler
    kwargs:
      url: $connection_str
      query:
        "select username as User, created_at, screen as Screen, application as Application,
        ip as IP, SEC_TO_TIME(session_time_sum) as Time_Spent from logs_agg"
      modify: up_tsu_desktop_app.modify_log_analysis(data)

  up-tsu-desktop/store_logs:
    pattern: /$YAMLURL/store_logs
    handler: FunctionHandler
    kwargs:
      auth: *AUTH
      function: up_tsu_desktop_app.prepare_store_logs(handler)
      headers:
        Content-Type: application/json

  up-tsu-desktop/logs_test:
    pattern: /$YAMLURL/logs_test
    handler: FunctionHandler
    kwargs:
      auth: *AUTH
      function: up_tsu_desktop_app.log_aggregator()
      headers:
        Content-Type: application/json

  up-tsu-desktop/tmp_test:
    pattern: /$YAMLURL/tmp_test
    handler: FormHandler
    kwargs:
      url: $connection_str
      query: "select * from tmp_test"

email:
  gramex-guide-gmail:
    type: gmail # Type of email used is GMail
    email: gramex.guide@gmail.com # Generic email ID used to test e-mails
    password: tlpmupxnhucitpte # App-specific password created for Gramex guide

alert:
  up-tsu-desktop/alert:
    # TODO - replace CSV file after client shares it
    # schedule the email after data scheduler is complete
    # startup: '*'
    # minutes: '*'
    thread: true
    data: $YAMLPATH/data/gramener_users.csv
    each: data
    to: "{{ row['email'] }}"
    subject: Executive Summary PDF
    html: <h3>Hello there {{ row['first'] }}! </h3>
    attachments:
      - '$URL_=$URL_EX={{ row["district"] }}&$MAP_={{ row["district"] }}_$E_M_$E_'

schedule:
  #   run-every-friday:
  #     function: up_tsu_desktop_app.send_pending_aprovals
  #     minutes: 0
  #     hours: 16
  #     weekdays: 'Fri'       # On Every friday
  #     months: '*'           # In every month
  data-log-agg-every-hour:
    function: up_tsu_desktop_app.log_aggregator()
    minutes: 0
    hours: "*"
    thread: true
